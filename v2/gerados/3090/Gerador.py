import os
import sys
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..')))

from models.Analise import *
from models.Sorteio import *
from models.Gerador import *
from libs.file_manager import lerSorteados

sorteios : list[Sorteio] = lerSorteados()
ultimo = sorteios[-1]

analise = Analise(sorteios)			
gerador = Gerador()

# gerador.addRegra(ValidacaoAnalise.sequenciaRepetidaJogoAnterior, anterior = sorteios[-50])

# gerador.addRegra(ValidacaoAnalise.compararSomaPosicoesPares, anterior = ultimo)

# gerador.addRegra(ValidacaoAnalise.compararSomaPosicoesImpares, anterior = ultimo)

posicoes = [[1, 3, 6, 9] , [1, 3, 7, 12] , [2, 7, 11, 12] , [3, 5, 9, 13] , [3, 5, 10, 12] , [3, 5, 10, 13] , [3, 6, 7, 12] , [3, 6, 9, 12] , [3, 6, 10, 12] , [3, 6, 10, 13] , [3, 7, 8, 12] , [3, 7, 10, 12] , [3, 7, 10, 13] , [3, 7, 10, 14] , [3, 8, 10, 13], [1, 3, 5, 6, 10], [1, 3, 5, 7, 10], [1, 3, 5, 9, 14], [1, 3, 5, 10, 14], [1, 3, 7, 8, 14], [1, 3, 7, 9, 14], [1, 5, 6, 10, 11], [1, 5, 7, 10, 11], [1, 5, 9, 10, 11], [1, 5, 9, 11, 14], [1, 5, 10, 11, 14], [2, 3, 5, 7, 10], [2, 3, 7, 8, 14], [2, 4, 7, 8, 11], [2, 5, 7, 10, 11], [2, 5, 9, 11, 12], [2, 6, 9, 11, 12], [2, 7, 9, 11, 14], [2, 8, 9, 11, 12], [3, 6, 9, 13, 14], [3, 7, 11, 12, 14], [3, 8, 9, 11, 12], [3, 8, 9, 13, 14], [6, 7, 10, 11, 13], [6, 8, 10, 11, 12], [6, 8, 10, 11, 13]]
for p in posicoes:
	gerador.addRegra(ValidacaoAnalise.compararChavePosicoes, anterior = ultimo, posicoes = p )

posicoes = [[1, 2, 5, 8, 13]]
for p in posicoes:
	gerador.addRegra(ValidacaoAnalise.compararChavePosicoesComAnterior, anterior = ultimo, posicoes = p )

gerador.addRegra(ValidacaoAnalise.compararSomas, anterior = ultimo)

gerador.addRegra(ValidacaoAnalise.compararMultiplicacoes, anterior = ultimo)

caracteristicas = [('soma_pares', 'soma_impares'), ('soma_pares', 'soma_primos'), ('soma_pares', 'soma_menores_13'), ('soma_impares', 'soma_menores_10'), ('soma_impares', 'soma_entre_10_20'), ('soma_impares', 'soma_menores_13'), ('soma_impares', 'soma_maiores_13'), ('soma_impares', 'soma_meio'), ('soma_impares', 'soma_col_2'), ('soma_impares', 'soma_col_3'), ('soma_menores_10', 'soma_primos'), ('soma_menores_10', 'soma_maiores_13'), ('soma_entre_10_20', 'soma_menores_13'), ('soma_entre_10_20', 'soma_col_1'), ('soma_entre_10_20', 'soma_col_2'), ('soma_maiores_20', 'soma_primos'), ('soma_primos', 'soma_menores_13'), ('soma_primos', 'soma_maiores_13'), ('soma_primos', 'soma_meio'), ('soma_menores_13', 'soma_maiores_13'), ('soma_menores_13', 'soma_meio'), ('soma_maiores_13', 'soma_col_1'), ('soma_maiores_13', 'soma_col_3'), ('soma_maiores_13', 'soma_col_4'), ('soma_meio', 'soma_col_3'),]
for c in caracteristicas:
	gerador.addRegra(ValidacaoAnalise.compararCaracteristicas, anterior = ultimo, caracteristicas = c)


gerador.addRegra(ValidacaoAnalise.verificarPossibilidadePosicao, posicao = 0, minimo = 1, maximo = 6)
gerador.addRegra(ValidacaoAnalise.verificarPossibilidadePosicao, posicao = 1, minimo = 2, maximo = 8)
gerador.addRegra(ValidacaoAnalise.verificarPossibilidadePosicao, posicao = 2, minimo = 3, maximo = 11)
gerador.addRegra(ValidacaoAnalise.verificarPossibilidadePosicao, posicao = 3, minimo = 4, maximo = 12)
gerador.addRegra(ValidacaoAnalise.verificarPossibilidadePosicao, posicao = 4, minimo = 5, maximo = 13)
gerador.addRegra(ValidacaoAnalise.verificarPossibilidadePosicao, posicao = 5, minimo = 6, maximo = 15)
gerador.addRegra(ValidacaoAnalise.verificarPossibilidadePosicao, posicao = 6, minimo = 7, maximo = 16)
gerador.addRegra(ValidacaoAnalise.verificarPossibilidadePosicao, posicao = 7, minimo = 9, maximo = 18)
gerador.addRegra(ValidacaoAnalise.verificarPossibilidadePosicao, posicao = 8, minimo = 10, maximo = 19)
gerador.addRegra(ValidacaoAnalise.verificarPossibilidadePosicao, posicao = 9, minimo = 11, maximo = 20)
gerador.addRegra(ValidacaoAnalise.verificarPossibilidadePosicao, posicao = 10, minimo = 13, maximo = 21)
gerador.addRegra(ValidacaoAnalise.verificarPossibilidadePosicao, posicao = 11, minimo = 15, maximo = 22)
gerador.addRegra(ValidacaoAnalise.verificarPossibilidadePosicao, posicao = 12, minimo = 16, maximo = 23)
gerador.addRegra(ValidacaoAnalise.verificarPossibilidadePosicao, posicao = 13, minimo = 18, maximo = 24)
gerador.addRegra(ValidacaoAnalise.verificarPossibilidadePosicao, posicao = 14, minimo = 19, maximo = 25)

gerador.addRegra(ValidacaoAnalise.contarQuantidadeRepetida, anterior = ultimo, minimo = 6, maximo = 13)

gerador.addRegra(ValidacaoAnalise.verificarMaximaDiferencaVizinhos, minimo = 2, maximo = 8)

gerador.addRegra(ValidacaoAnalise.verificarTamanhoMaximoSequencia, minimo = 2, maximo = 11)


gerador.addRegra(ValidacaoAnalise.verificarCaracteristica, caracteristica = 'pares', minimo = 4, maximo = 10)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristica, caracteristica = 'quantidade_primos', minimo = 2, maximo = 9)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristica, caracteristica = 'quantidade_menores_10', minimo = 2, maximo = 9)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristica, caracteristica = 'quantidade_entre_10_20', minimo = 2, maximo = 9)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristica, caracteristica = 'quantidade_maiores_20', minimo = 1, maximo = 6)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristica, caracteristica = 'quantidade_meio', minimo = 2, maximo = 9)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristica, caracteristica = 'quantidade_menores_13', minimo = 4, maximo = 11)

gerador.addRegra(ValidacaoAnalise.verificarCaracteristica, caracteristica = 'quantidade_col_1', minimo = 1, maximo = 5)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristica, caracteristica = 'quantidade_col_2', minimo = 1, maximo = 5)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristica, caracteristica = 'quantidade_col_3', minimo = 1, maximo = 5)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristica, caracteristica = 'quantidade_col_4', minimo = 1, maximo = 5)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristica, caracteristica = 'quantidade_col_5', minimo = 1, maximo = 5)

## Verificar se Ã© um sorteio anterior
sorteios_anteriores = [x.numeros for x in sorteios]
gerador.addRegra(ValidacaoAnalise.verificarContem, lista = sorteios_anteriores)


gerador.addRegra(ValidacaoAnalise.compararChavesIntervalos, anterior = ultimo, intervalo = 2)
gerador.addRegra(ValidacaoAnalise.compararChavesIntervalos, anterior = ultimo, intervalo = 3)


gerador.addRegra(ValidacaoAnalise.compararChavesIntervalos, anterior = ultimo, intervalo = 2)
gerador.addRegra(ValidacaoAnalise.compararChavesIntervalos, anterior = ultimo, intervalo = 3)
gerador.addRegra(ValidacaoAnalise.compararChavesIntervalos, anterior = sorteios[-2], intervalo = 4)
gerador.addRegra(ValidacaoAnalise.compararChavesIntervalos, anterior = sorteios[-4], intervalo = 4)
gerador.addRegra(ValidacaoAnalise.compararChavesIntervalos, anterior = sorteios[-8], intervalo = 4)
gerador.addRegra(ValidacaoAnalise.compararChavesIntervalos, anterior = sorteios[-9], intervalo = 4)
gerador.addRegra(ValidacaoAnalise.compararChavesIntervalos, anterior = sorteios[-16], intervalo = 6)

for n in range(1, 12):
	gerador.addRegra(ValidacaoAnalise.compararDiferencaPosicaoSimples, anterior = ultimo, passo = n)

for n in range(1, 11):
	gerador.addRegra(ValidacaoAnalise.compararSomaPosicaoSimples, anterior = ultimo, passo = n)

	
gerador.addRegra(ValidacaoAnalise.compararOperacoesPosicoes, anterior = ultimo, posicoes = (0, 3, 4, 8, 11, 13, 14), operacoes = ('-', '-', '-', '*', '+', '+'))
gerador.addRegra(ValidacaoAnalise.compararOperacoesPosicoes, anterior = ultimo, posicoes = (0, 5, 6, 7, 9, 11, 12), operacoes = ('+', '+', '*', '-', '-', '-'))
gerador.addRegra(ValidacaoAnalise.compararOperacoesPosicoes, anterior = ultimo, posicoes = (0, 5, 6, 7, 10, 11, 12), operacoes = ('-', '-', '*', '-', '+', '+'))
gerador.addRegra(ValidacaoAnalise.compararOperacoesPosicoes, anterior = ultimo, posicoes = (1, 2, 6, 8, 9, 11, 12), operacoes = ('-', '+', '+', '*', '-', '-'))
gerador.addRegra(ValidacaoAnalise.compararOperacoesPosicoes, anterior = ultimo, posicoes = (1, 3, 5, 6, 8, 9, 12), operacoes = ('+', '+', '*', '-', '-', '-'))
gerador.addRegra(ValidacaoAnalise.compararOperacoesPosicoes, anterior = ultimo, posicoes = (1, 4, 5, 6, 8, 9, 11), operacoes = ('+', '+', '*', '-', '-', '-'))
gerador.addRegra(ValidacaoAnalise.compararOperacoesPosicoes, anterior = ultimo, posicoes = (1, 4, 5, 7, 9, 11, 13), operacoes = ('+', '+', '*', '-', '-', '-'))
gerador.addRegra(ValidacaoAnalise.compararOperacoesPosicoes, anterior = ultimo, posicoes = (1, 4, 5, 8, 9, 11, 13), operacoes = ('+', '+', '*', '-', '-', '-'))
gerador.addRegra(ValidacaoAnalise.compararOperacoesPosicoes, anterior = ultimo, posicoes = (2, 3, 4, 5, 7, 9, 11), operacoes = ('-', '-', '-', '*', '+', '+'))
gerador.addRegra(ValidacaoAnalise.compararOperacoesPosicoes, anterior = ultimo, posicoes = (2, 5, 6, 8, 9, 11, 12), operacoes = ('+', '+', '*', '-', '-', '-'))
gerador.addRegra(ValidacaoAnalise.compararOperacoesPosicoes, anterior = ultimo, posicoes = (3, 4, 7, 9, 11, 12, 14), operacoes = ('+', '+', '*', '-', '-', '-'))
gerador.addRegra(ValidacaoAnalise.compararOperacoesPosicoes, anterior = ultimo, posicoes = (3, 5, 6, 7, 8, 12, 14), operacoes = ('+', '+', '*', '-', '-', '-'))
gerador.addRegra(ValidacaoAnalise.compararOperacoesPosicoes, anterior = ultimo, posicoes = (3, 5, 6, 8, 10, 11, 13), operacoes = ('+', '+', '*', '-', '-', '-'))
gerador.addRegra(ValidacaoAnalise.compararOperacoesPosicoes, anterior = ultimo, posicoes = (3, 5, 6, 9, 11, 13, 14), operacoes = ('-', '-', '-', '*', '+', '+'))
gerador.addRegra(ValidacaoAnalise.compararOperacoesPosicoes, anterior = ultimo, posicoes = (3, 6, 7, 9, 10, 13, 14), operacoes = ('+', '+', '*', '-', '-', '-'))
gerador.addRegra(ValidacaoAnalise.compararOperacoesPosicoes, anterior = ultimo, posicoes = (3, 7, 8, 9, 11, 13, 14), operacoes = ('+', '*', '+', '-', '-', '-'))
gerador.addRegra(ValidacaoAnalise.compararOperacoesPosicoes, anterior = ultimo, posicoes = (4, 5, 7, 9, 11, 12, 14), operacoes = ('+', '*', '-', '-', '-', '+'))


gerador.addRegra(ValidacaoAnalise.compararCombinacaoSorteiosMultiplos, anteriores = sorteios[-4:], posicoes = ((0, 5), (2, 12), (11, 13), (4, 9)))
gerador.addRegra(ValidacaoAnalise.compararCombinacaoSorteiosMultiplos, anteriores = sorteios[-4:], posicoes = ((3, 7), (0, 7), (13, 14), (3, 9)))
gerador.addRegra(ValidacaoAnalise.compararCombinacaoSorteiosMultiplos, anteriores = sorteios[-4:], posicoes = ((4, 8), (13, 14), (10, 11), (1, 2)))
gerador.addRegra(ValidacaoAnalise.compararCombinacaoSorteiosMultiplos, anteriores = sorteios[-4:], posicoes = ((4, 12), (12, 14), (0, 2), (7, 8)))
gerador.addRegra(ValidacaoAnalise.compararCombinacaoSorteiosMultiplos, anteriores = sorteios[-4:], posicoes = ((8, 10), (4, 9), (1, 2), (12, 13)))

lista = [((0, 1, 2), (3, 4, 14), (6, 8, 12)),((0, 1, 2), (12, 13, 14), (7, 8, 12)),((0, 1, 8), (3, 5, 10), (9, 10, 13)),((0, 1, 14), (10, 12, 13), (3, 7, 8)),((0, 2, 3), (6, 9, 12), (7, 9, 14)),((0, 2, 5), (10, 11, 13), (3, 8, 14)),((0, 2, 9), (4, 5, 13), (11, 12, 14)),((0, 2, 13), (3, 4, 10), (6, 9, 10)),((0, 2, 14), (7, 8, 9), (2, 5, 13)),((0, 3, 4), (2, 7, 9), (11, 12, 13)),((0, 3, 14), (2, 3, 12), (7, 8, 9)),((0, 4, 10), (2, 3, 6), (8, 12, 13)),((0, 5, 7), (2, 3, 13), (5, 9, 10)),((0, 5, 12), (2, 3, 13), (8, 9, 11)),((0, 6, 9), (4, 12, 13), (1, 2, 14)),((0, 7, 8), (6, 11, 12), (3, 4, 14)),((0, 7, 14), (8, 9, 12), (2, 4, 6)),((0, 10, 11), (4, 9, 14), (2, 3, 5)),((0, 11, 12), (3, 6, 8), (2, 9, 14)),((0, 11, 14), (5, 8, 10), (0, 2, 3)),((0, 13, 14), (1, 2, 4), (7, 8, 10)),((0, 13, 14), (2, 4, 7), (0, 7, 8)),((1, 2, 3), (9, 10, 12), (6, 7, 14)),((1, 2, 5), (6, 8, 11), (0, 11, 13)),((1, 2, 7), (11, 12, 13), (5, 6, 9)),((1, 2, 11), (2, 5, 8), (0, 13, 14)),((1, 2, 14), (5, 7, 9), (11, 12, 13)),((1, 4, 6), (8, 13, 14), (6, 9, 11)),((1, 7, 8), (4, 5, 10), (0, 12, 13)),((1, 8, 14), (2, 4, 8), (0, 8, 12)),((2, 3, 4), (0, 10, 14), (8, 12, 13)),((2, 3, 4), (6, 9, 12), (1, 9, 14)),((2, 3, 5), (0, 8, 14), (3, 12, 13)),((2, 3, 5), (12, 13, 14), (0, 6, 7)),((2, 3, 9), (0, 6, 12), (7, 13, 14)),((2, 3, 11), (2, 8, 14), (0, 5, 10)),((2, 4, 5), (0, 7, 10), (9, 13, 14)),((2, 4, 5), (10, 11, 13), (1, 7, 9)),((2, 4, 8), (12, 13, 14), (0, 8, 9)),((2, 5, 7), (2, 11, 12), (3, 13, 14)),((2, 5, 9), (12, 13, 14), (0, 2, 9)),((2, 5, 14), (0, 6, 9), (4, 11, 13)),((2, 6, 14), (0, 3, 5), (9, 10, 11)),((2, 7, 14), (0, 9, 13), (11, 12, 13)),((2, 9, 14), (0, 5, 6), (11, 12, 13)),((2, 10, 11), (6, 7, 9), (1, 13, 14)),((2, 11, 14), (3, 4, 5), (0, 6, 8)),((3, 4, 5), (8, 13, 14), (7, 9, 11)),((3, 4, 11), (7, 8, 14), (0, 2, 4)),((3, 5, 8), (0, 8, 13), (2, 12, 14)),((3, 5, 14), (0, 2, 3), (5, 9, 10)),((3, 6, 14), (1, 8, 10), (0, 6, 12)),((3, 8, 10), (0, 2, 13), (7, 8, 14)),((3, 8, 11), (4, 5, 14), (0, 8, 12)),((3, 8, 14), (0, 11, 13), (2, 8, 10)),((3, 9, 12), (5, 8, 14), (1, 2, 6)),((3, 11, 13), (1, 8, 14), (0, 7, 8)),((3, 13, 14), (0, 2, 4), (7, 8, 10)),((4, 5, 6), (0, 10, 14), (2, 11, 12)),((4, 5, 7), (0, 13, 14), (9, 11, 13)),((4, 5, 8), (9, 10, 13), (0, 2, 3)),((4, 5, 9), (0, 13, 14), (2, 9, 11)),((4, 5, 10), (11, 13, 14), (0, 7, 9)),((4, 5, 14), (0, 5, 7), (2, 10, 11)),((4, 5, 14), (6, 8, 10), (0, 10, 12)),((4, 5, 14), (10, 11, 13), (0, 7, 8)),((4, 6, 12), (3, 8, 10), (0, 1, 14)),((4, 7, 8), (5, 6, 14), (0, 11, 12)),((4, 8, 13), (0, 7, 11), (1, 2, 4)),((4, 9, 12), (7, 12, 14), (0, 1, 2)),((4, 11, 13), (2, 7, 14), (0, 6, 10)),((4, 13, 14), (0, 10, 11), (1, 6, 12)),((5, 6, 7), (0, 1, 2), (10, 11, 14)),((5, 6, 14), (0, 1, 11), (2, 8, 10)),((5, 6, 14), (2, 4, 6), (0, 8, 10)),((5, 7, 8), (1, 2, 11), (0, 12, 14)),((5, 7, 8), (6, 11, 13), (0, 2, 3)),((5, 7, 9), (2, 5, 7), (11, 12, 13)),((5, 7, 13), (4, 9, 10), (0, 1, 14)),((5, 8, 11), (0, 1, 2), (8, 9, 12)),((5, 8, 14), (2, 10, 11), (0, 3, 8)),((5, 10, 12), (8, 9, 14), (0, 4, 9)),((5, 11, 13), (0, 8, 10), (3, 9, 12)),((5, 12, 14), (8, 10, 13), (0, 2, 6)),((5, 13, 14), (2, 9, 12), (0, 5, 9)),((5, 13, 14), (8, 10, 12), (0, 2, 6)),((6, 7, 8), (3, 11, 13), (0, 2, 13)),((6, 7, 14), (0, 2, 3), (10, 11, 12)),((6, 8, 14), (0, 10, 12), (2, 3, 4)),((6, 9, 12), (0, 11, 14), (2, 4, 8)),((6, 11, 12), (0, 8, 9), (2, 4, 14)),((6, 11, 14), (5, 8, 10), (0, 1, 3)),((6, 13, 14), (7, 10, 12), (0, 1, 3)),((7, 8, 10), (0, 2, 13), (4, 8, 14)),((7, 8, 10), (11, 12, 13), (0, 1, 2)),((7, 8, 12), (0, 4, 11), (4, 7, 14)),((7, 8, 13), (10, 11, 13), (0, 1, 3)),((7, 10, 13), (0, 1, 2), (2, 3, 5)),((7, 11, 12), (2, 3, 5), (0, 3, 7)),((7, 13, 14), (0, 2, 3), (8, 10, 12)),((7, 13, 14), (8, 10, 11), (0, 1, 6)),((8, 9, 10), (12, 13, 14), (0, 1, 2)),((8, 9, 11), (2, 4, 5), (0, 3, 12)),((8, 10, 12), (2, 4, 14), (0, 7, 8)),((8, 10, 14), (0, 12, 13), (2, 4, 7)),((8, 11, 12), (1, 3, 4), (0, 8, 14)),((8, 11, 14), (2, 3, 5), (0, 7, 12)),((8, 11, 14), (5, 8, 10), (0, 2, 3)),((8, 12, 14), (8, 9, 11), (1, 3, 4)),((9, 10, 11), (2, 3, 4), (0, 1, 6)),((9, 10, 12), (4, 5, 14), (1, 2, 12)),((9, 11, 12), (2, 4, 6), (2, 5, 14)),((9, 11, 13), (2, 5, 7), (0, 3, 14)),((9, 11, 14), (1, 2, 7), (3, 5, 6)),((9, 12, 14), (0, 1, 11), (2, 7, 13)),((10, 11, 12), (0, 1, 13), (4, 5, 7)),((10, 11, 12), (1, 2, 4), (0, 7, 8)),((10, 11, 12), (4, 5, 6), (0, 1, 7)),((10, 11, 12), (5, 13, 14), (1, 2, 7)),((10, 12, 13), (2, 12, 14), (3, 7, 8)),((10, 12, 14), (2, 3, 5), (0, 7, 11)),((10, 12, 14), (5, 7, 9), (0, 2, 3)),((11, 12, 13), (0, 1, 4), (1, 5, 7)),((11, 12, 13), (0, 2, 4), (2, 8, 9)),((11, 12, 13), (0, 6, 11), (2, 4, 8)),((11, 12, 13), (0, 8, 14), (2, 4, 8)),((11, 12, 14), (0, 5, 8), (2, 4, 8)),((11, 12, 14), (2, 4, 5), (0, 7, 8)),((11, 13, 14), (2, 4, 7), (0, 3, 8)),((11, 13, 14), (5, 9, 10), (1, 2, 3)),((12, 13, 14), (0, 5, 6), (1, 4, 10)),((12, 13, 14), (7, 8, 9), (0, 2, 3))]
for n in lista:
	gerador.addRegra(ValidacaoAnalise.compararCombinacaoSorteiosMultiplos, anteriores = sorteios[-3:], posicoes = n)



lista = [[(10, 11, 12, 13), (0, 2, 6), (4, 6), (6,)],[(10, 11, 12, 13), (0, 4, 10), (2, 6), (2,)],[(10, 11, 12, 13), (1, 2, 4), (6, 7), (5,)],[(5, 6, 7, 8), (1, 3, 13), (0, 11), (14,)],[(10, 11, 12, 13), (2, 4, 5), (0, 3), (8,)],[(10, 11, 12, 13), (2, 4, 8), (0, 13), (8,)],[(5, 6, 7, 8), (2, 7, 11), (0, 11), (10,)],[(5, 6, 7, 8), (2, 12, 13), (0, 6), (11,)],[(0, 1, 2, 3), (3, 5, 8), (11, 13), (7,)],[(0, 1, 2, 3), (3, 9, 12), (5, 14), (10,)],[(0, 1, 2, 3), (4, 5, 6), (3, 13), (10,)],[(0, 1, 2, 3), (4, 5, 6), (11, 13), (9,)],[(0, 1, 2, 3), (4, 5, 13), (6, 12), (10,)],[(0, 1, 2, 3), (4, 8, 11), (6, 9), (14,)],[(0, 1, 2, 3), (4, 11, 12), (3, 14), (10,)],[(0, 1, 2, 3), (5, 6, 7), (6, 13), (10,)],[(0, 1, 2, 3), (5, 6, 7), (13, 14), (11,)],[(0, 1, 2, 3), (5, 6, 9), (13, 14), (10,)],[(0, 1, 2, 3), (5, 6, 11), (7, 13), (4,)],[(0, 1, 2, 3), (5, 7, 9), (13, 14), (10,)],[(0, 1, 2, 3), (5, 7, 10), (9, 12), (14,)],[(0, 1, 2, 3), (5, 7, 12), (13, 14), (8,)],[(0, 1, 2, 3), (5, 8, 10), (9, 10), (11,)],[(0, 1, 2, 3), (5, 8, 13), (9, 10), (12,)],[(0, 1, 2, 3), (5, 9, 10), (12, 14), (13,)],[(0, 1, 2, 3), (5, 9, 12), (7, 14), (13,)],[(0, 1, 2, 3), (5, 9, 12), (13, 14), (11,)],[(0, 1, 2, 3), (5, 10, 14), (6, 11), (9,)],[(10, 11, 12, 13), (5, 11, 14), (2, 9), (1,)],[(0, 1, 2, 3), (5, 13, 14), (6, 9), (2,)],[(0, 1, 2, 3), (6, 7, 8), (13, 14), (11,)],[(0, 1, 2, 3), (6, 10, 12), (6, 9), (14,)],[(0, 1, 2, 3), (6, 12, 14), (1, 6), (13,)],[(0, 1, 2, 3), (7, 8, 10), (4, 13), (10,)],[(0, 1, 2, 3), (7, 8, 12), (9, 14), (7,)],[(0, 1, 2, 3), (7, 8, 13), (4, 9), (9,)],[(0, 1, 2, 3), (7, 9, 12), (5, 14), (9,)],[(0, 1, 2, 3), (7, 11, 12), (5, 14), (13,)],[(0, 1, 2, 3), (7, 11, 12), (10, 14), (12,)],[(0, 1, 2, 3), (7, 12, 14), (5, 10), (9,)],[(0, 1, 2, 3), (8, 9, 10), (12, 14), (2,)],[(0, 1, 2, 3), (8, 9, 11), (5, 13), (8,)],[(0, 1, 2, 3), (8, 9, 12), (12, 14), (10,)],[(0, 1, 2, 3), (8, 10, 12), (6, 10), (9,)],[(0, 1, 2, 3), (8, 10, 12), (11, 13), (8,)],[(0, 1, 2, 3), (8, 11, 12), (12, 14), (7,)],[(0, 1, 2, 3), (8, 11, 14), (8, 10), (3,)],[(0, 1, 2, 3), (9, 10, 12), (5, 6), (14,)],[(0, 1, 2, 3), (9, 11, 12), (3, 14), (10,)],[(0, 1, 2, 3), (9, 12, 13), (6, 14), (10,)],[(0, 1, 2, 3), (10, 11, 12), (5, 6), (8,)],[(0, 1, 2, 3), (10, 11, 12), (8, 14), (5,)],[(0, 1, 2, 3), (10, 12, 14), (6, 10), (8,)],[(0, 1, 2, 3), (11, 12, 14), (4, 9), (5,)],[(10, 11, 12, 14), (0, 1, 3), (5, 8), (6,)],[(10, 11, 12, 14), (0, 1, 6), (3, 7), (6,)],[(5, 6, 7, 9), (0, 1, 13), (9, 12), (14,)],[(5, 6, 7, 9), (0, 2, 3), (11, 12), (1,)],[(5, 6, 7, 9), (0, 2, 9), (10, 13), (12,)],[(10, 11, 12, 14), (0, 3, 5), (2, 4), (6,)],[(5, 6, 7, 9), (0, 3, 11), (2, 9), (13,)],[(10, 11, 12, 14), (0, 5, 8), (2, 9), (1,)],[(10, 11, 12, 14), (0, 6, 8), (3, 7), (1,)],[(0, 1, 2, 4), (0, 9, 12), (5, 14), (11,)],[(10, 11, 12, 14), (1, 2, 5), (8, 9), (0,)],[(10, 11, 12, 14), (1, 3, 4), (7, 8), (7,)],[(10, 11, 12, 14), (1, 4, 5), (2, 13), (8,)],[(5, 6, 7, 9), (1, 3, 13), (10, 11), (1,)],[(10, 11, 12, 14), (1, 5, 8), (4, 13), (7,)],[(10, 11, 12, 14), (1, 8, 11), (0, 4), (6,)],[(10, 11, 12, 14), (2, 3, 4), (7, 9), (7,)],[(10, 11, 12, 14), (2, 3, 5), (0, 9), (12,)],[(10, 11, 12, 14), (2, 3, 6), (1, 10), (6,)],[(10, 11, 12, 14), (2, 3, 9), (4, 7), (0,)],[(5, 6, 7, 9), (2, 3, 10), (0, 13), (11,)],[(5, 6, 7, 9), (2, 3, 11), (11, 14), (0,)],[(5, 6, 7, 9), (2, 3, 13), (0, 11), (14,)],[(0, 1, 2, 4), (2, 5, 12), (9, 14), (7,)],[(0, 1, 2, 4), (2, 11, 12), (6, 8), (5,)],[(0, 1, 2, 4), (3, 4, 10), (12, 13), (8,)],[(5, 6, 7, 9), (2, 13, 14), (0, 13), (11,)],[(10, 11, 12, 14), (3, 5, 7), (11, 13), (6,)],[(10, 11, 12, 14), (3, 5, 9), (1, 2), (13,)],[(0, 1, 2, 4), (3, 6, 10), (9, 10), (11,)],[(0, 1, 2, 4), (3, 10, 11), (10, 14), (8,)],[(10, 11, 12, 14), (4, 5, 6), (7, 13), (1,)],[(10, 11, 12, 14), (4, 5, 8), (2, 8), (1,)],[(10, 11, 12, 14), (4, 5, 9), (1, 2), (12,)],[(10, 11, 12, 14), (4, 5, 9), (2, 12), (2,)],[(0, 1, 2, 4), (4, 6, 12), (10, 11), (14,)],[(0, 1, 2, 4), (4, 8, 11), (10, 11), (2,)],[(0, 1, 2, 4), (4, 12, 14), (3, 10), (7,)],[(10, 11, 12, 14), (5, 6, 7), (1, 2), (10,)],[(0, 1, 2, 4), (5, 7, 10), (5, 13), (12,)],[(0, 1, 2, 4), (5, 7, 12), (12, 14), (7,)],[(10, 11, 12, 14), (5, 8, 9), (1, 2), (4,)],[(0, 2, 3, 4), (5, 8, 10), (4, 13), (7,)],[(0, 2, 3, 4), (5, 10, 14), (9, 12), (13,)],[(5, 7, 8, 9), (6, 12, 13), (0, 2), (3,)],[(0, 2, 3, 4), (7, 8, 11), (4, 13), (14,)],[(0, 2, 3, 4), (8, 9, 10), (12, 14), (0,)],[(0, 2, 3, 4), (8, 10, 11), (4, 13), (7,)],[(0, 2, 3, 4), (9, 10, 11), (2, 6), (12,)],[(0, 2, 3, 4), (9, 10, 14), (6, 12), (9,)],[(0, 2, 3, 4), (10, 11, 14), (6, 9), (12,)],[(0, 2, 3, 4), (10, 13, 14), (6, 13), (10,)],[(11, 12, 13, 14), (0, 2, 3), (5, 8), (7,)],[(11, 12, 13, 14), (0, 2, 6), (4, 10), (9,)],[(6, 7, 8, 9), (0, 3, 6), (11, 12), (13,)],[(11, 12, 13, 14), (0, 4, 9), (2, 7), (12,)],[(11, 12, 13, 14), (0, 5, 9), (5, 6), (2,)],[(1, 2, 3, 4), (0, 5, 10), (7, 13), (5,)],[(1, 2, 3, 4), (0, 8, 10), (4, 13), (14,)],[(1, 2, 3, 4), (0, 10, 14), (6, 10), (13,)],[(1, 2, 3, 4), (0, 12, 13), (9, 14), (5,)],[(11, 12, 13, 14), (1, 2, 4), (7, 9), (8,)],[(6, 7, 8, 9), (1, 2, 14), (10, 12), (5,)],[(11, 12, 13, 14), (1, 4, 6), (8, 11), (5,)],[(11, 12, 13, 14), (2, 3, 4), (0, 7), (5,)],[(11, 12, 13, 14), (2, 3, 6), (0, 4), (8,)],[(11, 12, 13, 14), (2, 3, 6), (8, 10), (4,)],[(11, 12, 13, 14), (2, 3, 8), (0, 7), (5,)],[(11, 12, 13, 14), (2, 3, 12), (0, 5), (7,)],[(11, 12, 13, 14), (2, 5, 6), (4, 6), (8,)],[(11, 12, 13, 14), (2, 5, 7), (9, 11), (1,)],[(6, 7, 8, 9), (2, 12, 14), (0, 3), (11,)],[(6, 7, 8, 9), (3, 5, 13), (0, 11), (1,)],[(6, 7, 8, 9), (3, 11, 14), (0, 4), (13,)],[(6, 7, 8, 9), (4, 5, 14), (0, 11), (13,)],[(1, 2, 3, 4), (4, 9, 10), (3, 9), (13,)],[(11, 12, 13, 14), (5, 6, 7), (3, 9), (1,)],[(11, 12, 13, 14), (5, 7, 8), (3, 4), (2,)],[(1, 2, 3, 4), (5, 8, 11), (8, 14), (11,)],[(1, 2, 3, 4), (5, 9, 10), (0, 14), (13,)],[(1, 2, 3, 4), (5, 9, 13), (0, 11), (9,)],[(1, 2, 3, 4), (5, 13, 14), (10, 11), (7,)],[(1, 2, 3, 4), (6, 8, 10), (8, 13), (14,)],[(1, 2, 3, 4), (6, 11, 12), (0, 14), (9,)],[(1, 2, 3, 4), (8, 9, 10), (6, 8), (13,)],[(1, 2, 3, 4), (8, 10, 13), (6, 10), (10,)],[(6, 7, 8, 9), (9, 11, 14), (0, 5), (3,)],[(1, 2, 3, 4), (10, 11, 14), (5, 6), (13,)],[(1, 2, 3, 4), (11, 12, 14), (6, 11), (9,)]]
for n in lista:
	gerador.addRegra(ValidacaoAnalise.compararCombinacaoSorteiosMultiplos, anteriores = sorteios[-4:], posicoes = n)


lista = [(0, 3, 6, 8, 11, 13),(0, 3, 6, 9, 11, 13),(0, 4, 6, 8, 11, 13),(1, 2, 6, 8, 11, 13),(1, 2, 6, 9, 11, 13),(1, 3, 4, 7, 10, 12),(1, 3, 6, 7, 9, 14),(1, 3, 6, 9, 11, 13)]
for n in lista:
	gerador.addRegra(ValidacaoAnalise.verificarRepeticaoChave, anteriores = sorteios[-2:], posicoes = n)


lista = [['pares', (0, 3, 6, 8)],['pares', (0, 3, 6, 9)],['pares', (1, 3, 6, 9)],['pares', (1, 3, 9, 14)],['pares', (1, 3, 10, 12)],['pares', (1, 3, 10, 13)],['pares', (1, 4, 10, 11)],['pares', (1, 5, 10, 11)],['pares', (1, 7, 10, 11)],['pares', (2, 3, 9, 11)],['pares', (2, 3, 9, 13)],['pares', (2, 3, 9, 14)],['pares', (2, 3, 10, 13)],['pares', (2, 4, 9, 11)],['pares', (2, 4, 10, 11)],['pares', (2, 5, 9, 11)],['pares', (2, 5, 10, 11)],['pares', (2, 7, 8, 11)],['pares', (2, 7, 9, 11)],['pares', (2, 7, 10, 11)],['pares', (2, 7, 11, 12)],['pares', (2, 8, 9, 11)],['pares', (2, 8, 10, 11)],['pares', (3, 4, 10, 13)],['pares', (3, 5, 6, 10)],['pares', (3, 5, 7, 10)],['pares', (3, 5, 8, 10)],['pares', (3, 5, 8, 14)],['pares', (3, 5, 9, 14)],['pares', (3, 5, 10, 14)],['pares', (3, 6, 8, 10)],['pares', (3, 6, 9, 13)],['pares', (3, 6, 9, 14)],['pares', (3, 6, 10, 13)],['pares', (3, 6, 10, 14)],['pares', (3, 7, 8, 10)],['pares', (3, 7, 9, 10)],['pares', (3, 7, 9, 14)],['pares', (3, 7, 10, 11)],['pares', (3, 7, 10, 12)],['pares', (3, 7, 10, 13)],['pares', (3, 7, 10, 14)],['pares', (3, 8, 9, 14)],['pares', (3, 8, 10, 13)],['pares', (3, 8, 10, 14)],['pares', (3, 9, 10, 13)],['pares', (3, 9, 10, 14)],['pares', (3, 9, 11, 14)],['pares', (3, 9, 12, 14)],['pares', (3, 9, 13, 14)],['pares', (3, 10, 11, 13)],['pares', (3, 10, 13, 14)],['pares', (5, 10, 11, 13)],['impares', (0, 3, 6, 8)],['impares', (0, 3, 6, 9)],['impares', (1, 3, 6, 9)],['impares', (1, 3, 9, 14)],['impares', (1, 3, 10, 12)],['impares', (1, 3, 10, 13)],['impares', (1, 4, 10, 11)],['impares', (1, 5, 10, 11)],['impares', (1, 7, 10, 11)],['impares', (2, 3, 9, 11)],['impares', (2, 3, 9, 13)],['impares', (2, 3, 9, 14)],['impares', (2, 3, 10, 13)],['impares', (2, 4, 9, 11)],['impares', (2, 4, 10, 11)],['impares', (2, 5, 9, 11)],['impares', (2, 5, 10, 11)],['impares', (2, 7, 8, 11)],['impares', (2, 7, 9, 11)],['impares', (2, 7, 10, 11)],['impares', (2, 7, 11, 12)],['impares', (2, 8, 9, 11)],['impares', (2, 8, 10, 11)],['impares', (3, 4, 10, 13)],['impares', (3, 5, 6, 10)],['impares', (3, 5, 7, 10)],['impares', (3, 5, 8, 10)],['impares', (3, 5, 8, 14)],['impares', (3, 5, 9, 14)],['impares', (3, 5, 10, 14)],['impares', (3, 6, 8, 10)],['impares', (3, 6, 9, 13)],['impares', (3, 6, 9, 14)],['impares', (3, 6, 10, 13)],['impares', (3, 6, 10, 14)],['impares', (3, 7, 8, 10)],['impares', (3, 7, 9, 10)],['impares', (3, 7, 9, 14)],['impares', (3, 7, 10, 11)],['impares', (3, 7, 10, 12)],['impares', (3, 7, 10, 13)],['impares', (3, 7, 10, 14)],['impares', (3, 8, 9, 14)],['impares', (3, 8, 10, 13)],['impares', (3, 8, 10, 14)],['impares', (3, 9, 10, 13)],['impares', (3, 9, 10, 14)],['impares', (3, 9, 11, 14)],['impares', (3, 9, 12, 14)],['impares', (3, 9, 13, 14)],['impares', (3, 10, 11, 13)],['impares', (3, 10, 13, 14)],['impares', (5, 10, 11, 13)],['maior_sequencia', (0, 3, 6, 9)],['maior_sequencia', (0, 3, 8, 10)],['maior_sequencia', (1, 3, 6, 9)],['maior_sequencia', (1, 3, 7, 12)],['maior_sequencia', (1, 3, 8, 10)],['maior_sequencia', (1, 4, 5, 9)],['maior_sequencia', (1, 4, 5, 10)],['maior_sequencia', (1, 4, 6, 9)],['maior_sequencia', (1, 4, 7, 9)],['maior_sequencia', (1, 4, 7, 12)],['maior_sequencia', (1, 4, 8, 10)],['maior_sequencia', (1, 4, 9, 11)],['maior_sequencia', (1, 4, 9, 13)],['maior_sequencia', (1, 5, 6, 9)],['maior_sequencia', (1, 5, 6, 10)],['maior_sequencia', (1, 5, 7, 12)],['maior_sequencia', (1, 5, 9, 12)],['maior_sequencia', (1, 5, 10, 11)],['maior_sequencia', (1, 5, 10, 12)],['maior_sequencia', (1, 6, 7, 12)],['maior_sequencia', (1, 7, 8, 12)],['maior_sequencia', (1, 7, 9, 12)],['maior_sequencia', (1, 7, 10, 12)],['maior_sequencia', (1, 7, 11, 12)],['maior_sequencia', (1, 8, 10, 12)],['maior_sequencia', (2, 3, 7, 10)],['maior_sequencia', (2, 3, 8, 10)],['maior_sequencia', (2, 4, 7, 10)],['maior_sequencia', (2, 4, 8, 10)],['maior_sequencia', (2, 4, 9, 13)],['maior_sequencia', (2, 4, 10, 13)],['maior_sequencia', (2, 7, 10, 12)],['maior_sequencia', (2, 7, 11, 12)],['maior_sequencia', (2, 7, 11, 14)],['maior_sequencia', (2, 8, 10, 12)],['maior_sequencia', (3, 4, 8, 13)],['maior_sequencia', (3, 4, 9, 13)],['maior_sequencia', (3, 5, 8, 12)],['maior_sequencia', (3, 5, 10, 12)],['maior_sequencia', (3, 5, 10, 13)],['maior_sequencia', (3, 6, 7, 12)],['maior_sequencia', (3, 6, 8, 12)],['maior_sequencia', (3, 6, 9, 12)],['maior_sequencia', (3, 6, 10, 12)],['maior_sequencia', (3, 7, 8, 12)],['maior_sequencia', (3, 7, 10, 12)],['maior_sequencia', (4, 6, 7, 12)],['maior_sequencia', (4, 6, 8, 13)],['maior_sequencia', (4, 7, 8, 12)],['maior_sequencia', (4, 7, 9, 13)],['maior_sequencia', (4, 7, 11, 12)],['maior_sequencia', (5, 6, 7, 12)],['maior_sequencia', (5, 7, 8, 12)],['maior_sequencia', (6, 7, 10, 12)],['maior_sequencia', (6, 8, 10, 12)],['maior_sequencia', (6, 8, 12, 13)],['quantidade_sequencias', (1, 3, 7, 9)],['quantidade_sequencias', (1, 3, 7, 12)],['quantidade_sequencias', (1, 4, 7, 9)],['quantidade_sequencias', (1, 4, 7, 12)],['quantidade_sequencias', (1, 4, 9, 11)],['quantidade_sequencias', (2, 4, 7, 11)],['quantidade_sequencias', (2, 5, 7, 11)],['quantidade_sequencias', (2, 6, 10, 13)],['quantidade_sequencias', (2, 7, 10, 12)],['quantidade_sequencias', (2, 7, 11, 12)],['quantidade_sequencias', (3, 5, 7, 11)],['quantidade_sequencias', (3, 7, 10, 12)],['quantidade_sequencias', (4, 6, 7, 12)],['quantidade_sequencias', (4, 7, 9, 11)],['quantidade_sequencias', (4, 8, 9, 12)],['quantidade_entre_10_20', (1, 3, 6, 9)],['quantidade_primos', (0, 3, 6, 8)],['quantidade_primos', (0, 3, 6, 9)],['quantidade_primos', (1, 3, 6, 8)],['quantidade_primos', (1, 3, 6, 9)],['quantidade_primos', (2, 3, 7, 12)],['quantidade_primos', (2, 4, 9, 11)],['quantidade_primos', (2, 4, 10, 11)],['quantidade_primos', (2, 6, 10, 11)],['quantidade_primos', (2, 7, 10, 11)],['quantidade_primos', (3, 6, 7, 12)],['quantidade_primos', (3, 6, 8, 12)],['quantidade_primos', (3, 6, 9, 12)],['quantidade_primos', (3, 6, 10, 12)],['quantidade_primos', (3, 7, 10, 12)],['diferenca_maxima', (0, 4, 7, 10)],['diferenca_maxima', (1, 2, 4, 10)],['diferenca_maxima', (1, 4, 5, 9)],['diferenca_maxima', (1, 4, 5, 10)],['diferenca_maxima', (1, 4, 6, 9)],['diferenca_maxima', (1, 4, 6, 10)],['diferenca_maxima', (1, 4, 7, 10)],['diferenca_maxima', (1, 4, 8, 10)],['diferenca_maxima', (1, 4, 9, 10)],['diferenca_maxima', (1, 4, 9, 11)],['diferenca_maxima', (1, 4, 9, 12)],['diferenca_maxima', (1, 4, 9, 13)],['diferenca_maxima', (1, 4, 10, 11)],['diferenca_maxima', (1, 4, 10, 12)],['diferenca_maxima', (1, 4, 10, 13)],['diferenca_maxima', (1, 5, 6, 10)],['diferenca_maxima', (1, 5, 7, 10)],['diferenca_maxima', (1, 5, 10, 11)],['diferenca_maxima', (1, 7, 10, 13)],['diferenca_maxima', (1, 8, 10, 13)],['diferenca_maxima', (2, 4, 7, 10)],['diferenca_maxima', (2, 4, 10, 13)],['diferenca_maxima', (2, 5, 7, 10)],['diferenca_maxima', (2, 6, 10, 13)],['diferenca_maxima', (2, 7, 10, 13)],['diferenca_maxima', (3, 4, 9, 12)],['diferenca_maxima', (3, 4, 10, 13)],['diferenca_maxima', (3, 5, 7, 9)],['diferenca_maxima', (3, 5, 7, 10)],['diferenca_maxima', (3, 6, 10, 13)],['diferenca_maxima', (3, 7, 10, 13)],['diferenca_maxima', (4, 5, 7, 10)],['diferenca_maxima', (4, 6, 7, 10)],['diferenca_maxima', (4, 6, 8, 12)],['diferenca_maxima', (4, 7, 9, 10)],['diferenca_maxima', (4, 7, 9, 11)],['diferenca_maxima', (4, 7, 9, 12)],['diferenca_maxima', (4, 7, 10, 13)],['diferenca_maxima', (4, 8, 9, 12)],['diferenca_maxima', (4, 8, 10, 13)],['diferenca_maxima', (4, 9, 11, 13)],['diferenca_maxima', (5, 7, 10, 12)],['quantidade_menores_13', (1, 3, 5, 10)],['quantidade_menores_13', (1, 4, 9, 11)],['quantidade_menores_13', (3, 4, 8, 12)],['quantidade_menores_13', (3, 5, 8, 12)],['quantidade_menores_13', (3, 5, 11, 12)],['quantidade_menores_13', (3, 8, 10, 13)],['quantidade_maiores_13', (3, 5, 10, 12)],['quantidade_maiores_13', (3, 5, 10, 13)],['quantidade_maiores_13', (3, 8, 10, 13)],['quantidade_meio', (0, 1, 6, 10)],['quantidade_meio', (0, 3, 7, 11)],['quantidade_meio', (0, 4, 7, 10)],['quantidade_meio', (0, 4, 7, 11)],['quantidade_meio', (0, 4, 7, 12)],['quantidade_meio', (0, 4, 7, 13)],['quantidade_meio', (0, 4, 9, 13)],['quantidade_meio', (0, 5, 7, 11)],['quantidade_meio', (1, 3, 6, 9)],['quantidade_meio', (1, 3, 6, 10)],['quantidade_meio', (1, 3, 6, 11)],['quantidade_meio', (1, 3, 7, 9)],['quantidade_meio', (1, 3, 7, 10)],['quantidade_meio', (1, 3, 7, 11)],['quantidade_meio', (1, 3, 7, 12)],['quantidade_meio', (1, 3, 7, 13)],['quantidade_meio', (1, 4, 5, 9)],['quantidade_meio', (1, 4, 6, 9)],['quantidade_meio', (1, 4, 6, 10)],['quantidade_meio', (1, 4, 6, 11)],['quantidade_meio', (1, 4, 7, 9)],['quantidade_meio', (1, 4, 7, 10)],['quantidade_meio', (1, 4, 7, 11)],['quantidade_meio', (1, 4, 7, 12)],['quantidade_meio', (1, 4, 7, 13)],['quantidade_meio', (1, 4, 9, 11)],['quantidade_meio', (1, 4, 9, 13)],['quantidade_meio', (1, 4, 11, 14)],['quantidade_meio', (1, 5, 6, 10)],['quantidade_meio', (1, 5, 7, 10)],['quantidade_meio', (1, 5, 7, 13)],['quantidade_meio', (1, 5, 9, 13)],['quantidade_meio', (1, 6, 7, 13)],['quantidade_meio', (1, 6, 8, 13)],['quantidade_meio', (1, 6, 10, 12)],['quantidade_meio', (1, 6, 10, 13)],['quantidade_meio', (1, 6, 10, 14)],['quantidade_meio', (1, 6, 11, 13)],['quantidade_meio', (1, 7, 9, 13)],['quantidade_meio', (1, 7, 9, 14)],['quantidade_meio', (1, 7, 12, 14)],['quantidade_meio', (2, 4, 7, 10)],['quantidade_meio', (2, 4, 7, 11)],['quantidade_meio', (2, 5, 7, 11)],['quantidade_meio', (2, 6, 11, 12)],['quantidade_meio', (3, 4, 7, 10)],['quantidade_meio', (3, 4, 7, 11)],['quantidade_meio', (3, 5, 7, 11)],['quantidade_meio', (3, 7, 8, 10)],['quantidade_meio', (4, 6, 8, 12)],['quantidade_meio', (4, 7, 9, 10)],['quantidade_meio', (4, 7, 9, 11)],['quantidade_meio', (4, 7, 9, 12)],['quantidade_meio', (4, 7, 10, 13)],['quantidade_meio', (4, 7, 11, 13)],['quantidade_meio', (4, 8, 9, 12)],['quantidade_meio', (4, 9, 10, 13)],['quantidade_meio', (4, 9, 11, 13)],['quantidade_meio', (4, 9, 12, 13)],['quantidade_meio', (5, 7, 11, 13)],['quantidade_col_1', (0, 1, 7, 9)],['quantidade_col_1', (0, 2, 7, 10)],['quantidade_col_1', (1, 3, 7, 9)],['quantidade_col_1', (1, 4, 6, 9)],['quantidade_col_1', (1, 4, 7, 9)],['quantidade_col_1', (1, 4, 9, 11)],['quantidade_col_1', (1, 5, 6, 9)],['quantidade_col_1', (1, 5, 6, 10)],['quantidade_col_1', (1, 5, 7, 9)],['quantidade_col_1', (1, 5, 7, 10)],['quantidade_col_1', (1, 5, 9, 10)],['quantidade_col_1', (1, 5, 9, 11)],['quantidade_col_1', (1, 5, 9, 12)],['quantidade_col_1', (1, 7, 9, 11)],['quantidade_col_1', (1, 7, 9, 13)],['quantidade_col_1', (2, 4, 7, 10)],['quantidade_col_1', (2, 6, 8, 11)],['quantidade_col_1', (2, 7, 8, 11)],['quantidade_col_1', (3, 7, 10, 12)],['quantidade_col_1', (4, 9, 11, 13)],['quantidade_col_2', (0, 1, 4, 10)],['quantidade_col_2', (0, 2, 4, 10)],['quantidade_col_2', (0, 2, 6, 11)],['quantidade_col_2', (0, 3, 6, 9)],['quantidade_col_2', (0, 3, 6, 10)],['quantidade_col_2', (0, 3, 6, 11)],['quantidade_col_2', (0, 3, 7, 10)],['quantidade_col_2', (0, 4, 6, 9)],['quantidade_col_2', (0, 4, 7, 10)],['quantidade_col_2', (0, 4, 8, 10)],['quantidade_col_2', (0, 4, 9, 10)],['quantidade_col_2', (0, 4, 9, 12)],['quantidade_col_2', (0, 4, 10, 13)],['quantidade_col_2', (1, 2, 6, 9)],['quantidade_col_2', (1, 2, 6, 10)],['quantidade_col_2', (1, 2, 6, 11)],['quantidade_col_2', (1, 3, 6, 9)],['quantidade_col_2', (1, 3, 6, 10)],['quantidade_col_2', (1, 3, 6, 11)],['quantidade_col_2', (1, 3, 7, 10)],['quantidade_col_2', (1, 3, 8, 10)],['quantidade_col_2', (1, 3, 8, 14)],['quantidade_col_2', (1, 4, 5, 10)],['quantidade_col_2', (1, 4, 6, 9)],['quantidade_col_2', (1, 4, 6, 10)],['quantidade_col_2', (1, 4, 6, 11)],['quantidade_col_2', (1, 4, 7, 9)],['quantidade_col_2', (1, 4, 7, 10)],['quantidade_col_2', (1, 4, 8, 10)],['quantidade_col_2', (1, 4, 9, 10)],['quantidade_col_2', (1, 4, 9, 12)],['quantidade_col_2', (1, 4, 10, 12)],['quantidade_col_2', (1, 4, 10, 13)],['quantidade_col_2', (1, 5, 10, 12)],['quantidade_col_2', (1, 6, 8, 10)],['quantidade_col_2', (1, 6, 10, 13)],['quantidade_col_2', (1, 7, 10, 11)],['quantidade_col_2', (1, 7, 10, 12)],['quantidade_col_2', (1, 8, 10, 11)],['quantidade_col_2', (1, 8, 10, 12)],['quantidade_col_2', (2, 4, 7, 10)],['quantidade_col_2', (2, 4, 7, 11)],['quantidade_col_2', (2, 4, 8, 10)],['quantidade_col_2', (2, 4, 8, 12)],['quantidade_col_2', (2, 4, 10, 13)],['quantidade_col_2', (2, 5, 6, 11)],['quantidade_col_2', (2, 6, 8, 12)],['quantidade_col_2', (2, 6, 9, 12)],['quantidade_col_2', (2, 6, 10, 12)],['quantidade_col_2', (2, 6, 11, 12)],['quantidade_col_2', (2, 7, 11, 14)],['quantidade_col_2', (3, 4, 8, 12)],['quantidade_col_2', (3, 4, 10, 13)],['quantidade_col_2', (3, 6, 8, 12)],['quantidade_col_2', (3, 6, 10, 13)],['quantidade_col_2', (3, 7, 10, 12)],['quantidade_col_2', (3, 7, 10, 13)],['quantidade_col_2', (4, 5, 9, 13)],['quantidade_col_2', (4, 6, 8, 12)],['quantidade_col_2', (4, 7, 9, 12)],['quantidade_col_2', (4, 7, 10, 13)],['quantidade_col_2', (4, 8, 9, 12)],['quantidade_col_2', (4, 8, 10, 13)],['quantidade_col_2', (6, 8, 10, 12)],['quantidade_col_3', (0, 3, 4, 8)],['quantidade_col_3', (0, 3, 5, 8)],['quantidade_col_3', (0, 3, 7, 10)],['quantidade_col_3', (0, 3, 8, 11)],['quantidade_col_3', (0, 3, 8, 13)],['quantidade_col_3', (1, 3, 5, 7)],['quantidade_col_3', (1, 3, 5, 8)],['quantidade_col_3', (1, 3, 5, 9)],['quantidade_col_3', (1, 3, 7, 9)],['quantidade_col_3', (1, 3, 7, 10)],['quantidade_col_3', (1, 3, 7, 12)],['quantidade_col_3', (1, 3, 7, 13)],['quantidade_col_3', (1, 3, 7, 14)],['quantidade_col_3', (1, 3, 8, 11)],['quantidade_col_3', (1, 3, 8, 13)],['quantidade_col_3', (1, 4, 6, 11)],['quantidade_col_3', (1, 4, 9, 11)],['quantidade_col_3', (2, 3, 5, 8)],['quantidade_col_3', (2, 3, 5, 11)],['quantidade_col_3', (2, 3, 7, 10)],['quantidade_col_3', (2, 4, 7, 11)],['quantidade_col_3', (2, 5, 6, 11)],['quantidade_col_3', (2, 5, 7, 11)],['quantidade_col_3', (2, 6, 11, 12)],['quantidade_col_3', (3, 4, 5, 8)],['quantidade_col_3', (3, 4, 7, 10)],['quantidade_col_3', (3, 4, 8, 10)],['quantidade_col_3', (3, 4, 10, 12)],['quantidade_col_3', (3, 4, 10, 13)],['quantidade_col_3', (3, 4, 11, 13)],['quantidade_col_3', (3, 5, 6, 8)],['quantidade_col_3', (3, 5, 6, 9)],['quantidade_col_3', (3, 5, 6, 10)],['quantidade_col_3', (3, 5, 6, 11)],['quantidade_col_3', (3, 5, 7, 8)],['quantidade_col_3', (3, 5, 7, 10)],['quantidade_col_3', (3, 5, 7, 11)],['quantidade_col_3', (3, 5, 8, 9)],['quantidade_col_3', (3, 5, 8, 10)],['quantidade_col_3', (3, 5, 8, 11)],['quantidade_col_3', (3, 5, 8, 12)],['quantidade_col_3', (3, 5, 8, 13)],['quantidade_col_3', (3, 5, 8, 14)],['quantidade_col_3', (3, 5, 9, 13)],['quantidade_col_3', (3, 5, 10, 13)],['quantidade_col_3', (3, 5, 11, 12)],['quantidade_col_3', (3, 5, 11, 13)],['quantidade_col_3', (3, 5, 11, 14)],['quantidade_col_3', (3, 6, 7, 10)],['quantidade_col_3', (3, 6, 10, 13)],['quantidade_col_3', (3, 7, 8, 10)],['quantidade_col_3', (3, 7, 10, 11)],['quantidade_col_3', (3, 7, 10, 12)],['quantidade_col_3', (3, 7, 10, 13)],['quantidade_col_3', (3, 8, 10, 11)],['quantidade_col_3', (3, 8, 10, 13)],['quantidade_col_3', (4, 7, 9, 11)],['quantidade_col_3', (4, 9, 11, 13)],['quantidade_col_4', (0, 2, 8, 12)],['quantidade_col_4', (0, 4, 7, 12)],['quantidade_col_4', (0, 4, 8, 12)],['quantidade_col_4', (0, 5, 8, 10)],['quantidade_col_4', (0, 5, 8, 12)],['quantidade_col_4', (0, 6, 9, 13)],['quantidade_col_4', (1, 2, 8, 12)],['quantidade_col_4', (1, 4, 6, 9)],['quantidade_col_4', (1, 4, 7, 9)],['quantidade_col_4', (1, 4, 7, 12)],['quantidade_col_4', (1, 4, 8, 10)],['quantidade_col_4', (1, 5, 9, 12)],['quantidade_col_4', (1, 8, 10, 12)],['quantidade_col_4', (2, 4, 7, 10)],['quantidade_col_4', (2, 4, 7, 11)],['quantidade_col_4', (2, 4, 8, 10)],['quantidade_col_4', (2, 4, 8, 11)],['quantidade_col_4', (2, 4, 8, 12)],['quantidade_col_4', (2, 4, 10, 13)],['quantidade_col_4', (2, 5, 6, 11)],['quantidade_col_4', (2, 5, 10, 11)],['quantidade_col_4', (2, 5, 11, 14)],['quantidade_col_4', (2, 6, 8, 11)],['quantidade_col_4', (2, 8, 11, 12)],['quantidade_col_4', (2, 8, 12, 14)],['quantidade_col_4', (3, 5, 9, 12)],['quantidade_col_4', (3, 5, 10, 12)],['quantidade_col_4', (3, 5, 10, 13)],['quantidade_col_4', (4, 5, 10, 13)],['quantidade_col_4', (4, 7, 9, 12)],['quantidade_col_4', (4, 8, 9, 12)],['quantidade_col_4', (4, 8, 10, 13)],['quantidade_col_4', (5, 7, 11, 12)],['quantidade_col_4', (5, 10, 11, 13)],['quantidade_col_5', (1, 3, 5, 10)],['quantidade_col_5', (1, 3, 6, 9)],['quantidade_col_5', (1, 3, 8, 10)],['quantidade_col_5', (1, 4, 6, 11)],['quantidade_col_5', (1, 5, 10, 11)],['quantidade_col_5', (2, 4, 11, 13)],['quantidade_col_5', (2, 7, 11, 12)],['quantidade_col_5', (3, 4, 10, 12)],['quantidade_col_5', (3, 4, 10, 13)],['quantidade_col_5', (3, 6, 8, 12)],['quantidade_col_5', (3, 7, 8, 10)],['quantidade_col_5', (3, 7, 11, 14)]]
for ca, po in lista:
	gerador.addRegra(ValidacaoAnalise.compararCaracteristicaPosicao, anterior = ultimo, caracteristica = ca, posicoes =  po)


lista = [(0, 1, 2, 3, 4, 7, 8, 11, 24),(0, 1, 2, 3, 8, 9, 13, 14, 16),(0, 1, 2, 4, 5, 8, 11, 14, 15),(0, 1, 2, 5, 6, 7, 8, 17, 18),(0, 1, 2, 5, 9, 11, 15, 19, 24),(0, 1, 2, 6, 11, 15, 16, 20, 21),(0, 1, 2, 10, 11, 13, 14, 15, 18),(0, 1, 3, 6, 12, 13, 16, 21, 24),(0, 1, 3, 9, 12, 13, 14, 16, 23),(0, 1, 4, 5, 13, 14, 19, 22, 23),(0, 1, 4, 13, 14, 19, 21, 22, 23),(0, 1, 5, 7, 9, 15, 19, 21, 24),(0, 1, 6, 7, 8, 13, 19, 20, 21),(0, 2, 3, 4, 5, 8, 10, 11, 16),(0, 2, 3, 7, 9, 10, 14, 17, 18),(0, 2, 4, 5, 6, 7, 9, 12, 23),(0, 2, 4, 6, 12, 13, 14, 16, 18),(0, 2, 4, 8, 10, 17, 18, 21, 24),(0, 2, 4, 12, 17, 18, 19, 21, 24),(0, 2, 5, 6, 7, 11, 19, 22, 24),(0, 2, 5, 7, 8, 9, 12, 17, 23),(0, 2, 5, 7, 8, 11, 13, 15, 17),(0, 2, 5, 7, 10, 11, 16, 20, 24),(0, 2, 5, 8, 9, 11, 18, 21, 24),(0, 2, 5, 8, 12, 14, 15, 16, 17),(0, 2, 7, 8, 11, 17, 18, 20, 21),(0, 2, 8, 10, 11, 13, 15, 16, 17),(0, 2, 9, 12, 17, 19, 21, 22, 24),(0, 3, 4, 5, 9, 11, 15, 20, 23),(0, 3, 4, 6, 12, 16, 18, 19, 24),(0, 3, 4, 9, 11, 12, 16, 18, 20),(0, 3, 5, 6, 7, 11, 16, 22, 24),(0, 3, 5, 10, 14, 15, 20, 22, 24),(0, 3, 8, 9, 11, 12, 18, 20, 22),(0, 4, 5, 6, 7, 11, 16, 19, 21),(0, 4, 7, 8, 9, 12, 18, 19, 21),(0, 4, 7, 13, 14, 17, 19, 22, 23),(0, 4, 9, 11, 12, 17, 19, 22, 23),(0, 5, 6, 7, 8, 10, 16, 18, 20),(0, 5, 6, 10, 12, 13, 16, 18, 20),(0, 5, 7, 9, 11, 15, 17, 19, 23),(0, 5, 8, 9, 12, 16, 19, 23, 24),(0, 5, 11, 15, 16, 17, 18, 22, 24),(0, 6, 11, 15, 17, 18, 19, 20, 21),(0, 7, 8, 11, 14, 16, 18, 21, 23),(0, 8, 9, 10, 13, 16, 19, 20, 23),(0, 8, 11, 12, 16, 17, 18, 20, 23),(0, 9, 12, 14, 16, 18, 19, 20, 23),(1, 2, 3, 4, 6, 10, 16, 17, 20),(1, 2, 3, 4, 9, 12, 16, 19, 21),(1, 2, 3, 6, 13, 14, 17, 21, 23),(1, 2, 3, 7, 10, 14, 17, 18, 19),(1, 2, 4, 5, 6, 10, 11, 21, 23),(1, 2, 4, 6, 12, 17, 19, 20, 23),(1, 2, 4, 11, 12, 18, 19, 21, 23),(1, 2, 6, 12, 14, 17, 18, 21, 23),(1, 3, 4, 6, 12, 14, 16, 19, 20),(1, 3, 4, 9, 12, 14, 16, 18, 19),(1, 3, 5, 8, 15, 16, 17, 20, 22),(1, 3, 6, 7, 12, 16, 17, 19, 21),(1, 3, 9, 10, 12, 15, 16, 18, 23),(1, 4, 5, 6, 8, 15, 18, 22, 23),(1, 4, 6, 7, 8, 13, 18, 20, 21),(1, 4, 8, 9, 11, 18, 21, 23, 24),(1, 4, 8, 10, 14, 18, 19, 20, 23),(1, 5, 6, 7, 9, 11, 12, 13, 19),(1, 5, 7, 9, 10, 11, 15, 19, 22),(1, 5, 8, 9, 10, 12, 15, 22, 23),(1, 5, 8, 14, 15, 16, 20, 21, 24),(1, 5, 12, 16, 17, 18, 19, 21, 23),(1, 6, 7, 9, 10, 13, 14, 15, 20),(1, 6, 7, 12, 14, 18, 19, 20, 21),(1, 6, 9, 10, 11, 14, 20, 22, 24),(1, 8, 9, 10, 13, 17, 18, 20, 21),(1, 9, 10, 13, 14, 19, 20, 21, 22),(2, 3, 4, 5, 7, 10, 13, 16, 19),(2, 3, 4, 6, 9, 10, 14, 16, 20),(2, 3, 4, 8, 11, 14, 17, 19, 21),(2, 3, 5, 6, 7, 8, 11, 21, 24),(2, 3, 5, 7, 10, 12, 14, 17, 21),(2, 3, 5, 10, 11, 16, 19, 21, 22),(2, 3, 6, 10, 11, 13, 15, 19, 22),(2, 3, 6, 12, 13, 14, 16, 20, 24),(2, 3, 8, 10, 12, 17, 22, 23, 24),(2, 4, 5, 8, 9, 10, 13, 22, 23),(2, 4, 5, 10, 11, 16, 19, 21, 23),(2, 4, 6, 7, 9, 11, 19, 21, 24),(2, 4, 6, 9, 12, 16, 18, 22, 23),(2, 4, 8, 12, 15, 16, 18, 22, 23),(2, 4, 11, 12, 16, 18, 19, 20, 21),(2, 5, 6, 7, 8, 15, 18, 21, 24),(2, 5, 6, 8, 9, 11, 12, 15, 20),(2, 5, 7, 8, 9, 13, 15, 20, 21),(2, 5, 7, 8, 9, 13, 20, 21, 24),(2, 5, 10, 11, 15, 16, 18, 21, 22),(2, 6, 7, 8, 12, 17, 18, 21, 24),(2, 6, 9, 10, 14, 17, 19, 22, 23),(2, 6, 10, 12, 16, 17, 19, 22, 24),(2, 7, 8, 9, 13, 15, 20, 22, 24),(2, 8, 9, 10, 15, 17, 20, 22, 23),(2, 9, 10, 11, 12, 13, 17, 18, 22),(3, 4, 5, 6, 12, 15, 16, 18, 24),(3, 4, 6, 7, 9, 10, 14, 16, 20),(3, 4, 6, 12, 16, 18, 19, 20, 24),(3, 4, 8, 9, 10, 12, 15, 22, 23),(3, 4, 8, 12, 15, 17, 18, 22, 23),(3, 5, 6, 8, 13, 14, 17, 21, 24),(3, 5, 7, 10, 14, 20, 21, 23, 24),(3, 5, 9, 10, 14, 16, 22, 23, 24),(3, 6, 7, 10, 14, 15, 16, 21, 23),(3, 6, 8, 9, 13, 14, 17, 18, 19),(3, 6, 12, 13, 16, 18, 20, 22, 24),(3, 7, 9, 10, 11, 13, 15, 18, 21),(3, 8, 9, 10, 13, 16, 17, 20, 24),(3, 8, 10, 14, 15, 16, 17, 18, 22),(3, 9, 10, 13, 17, 18, 19, 21, 22),(4, 5, 6, 8, 9, 13, 18, 22, 23),(4, 5, 7, 11, 13, 16, 17, 20, 21),(4, 5, 8, 10, 11, 12, 13, 16, 22),(4, 6, 7, 15, 16, 17, 18, 22, 23),(4, 6, 9, 12, 14, 15, 19, 23, 24),(4, 7, 12, 13, 18, 19, 20, 21, 24),(4, 8, 11, 13, 17, 20, 21, 23, 24),(4, 9, 10, 11, 15, 16, 20, 23, 24),(5, 6, 7, 9, 12, 15, 16, 19, 23),(5, 6, 8, 10, 11, 13, 17, 21, 23),(5, 6, 9, 10, 12, 13, 18, 20, 23),(5, 7, 8, 9, 16, 19, 21, 22, 24),(5, 7, 8, 13, 14, 15, 17, 18, 21),(5, 7, 9, 11, 12, 17, 18, 21, 24),(5, 8, 9, 10, 15, 16, 20, 21, 24),(5, 9, 11, 12, 13, 14, 16, 19, 21),(6, 7, 8, 11, 14, 16, 18, 19, 24),(6, 7, 12, 13, 15, 18, 20, 21, 24),(6, 9, 11, 13, 14, 16, 18, 22, 24),(7, 8, 12, 14, 16, 17, 18, 22, 24),(7, 11, 12, 13, 14, 18, 20, 21, 24),(8, 9, 10, 13, 17, 18, 19, 22, 24),(8, 11, 14, 17, 18, 19, 20, 22, 24),(9, 10, 11, 13, 17, 19, 20, 21, 22)]
for n in lista:
	gerador.addRegra(ValidacaoAnalise.compararOcorrenciaRank, anteriores = sorteios[-10:], posicoes = n)


gerador.addRegra(ValidacaoAnalise.compararOcorrenciasNumerosRecorrentes, anteriores = sorteios[-20:])

# '-'
lista = [(0, 1, 3, 7, 9, 14),(0, 1, 4, 6, 9, 11),(0, 1, 6, 9, 11, 14),(0, 1, 7, 9, 11, 14),(0, 2, 7, 9, 11, 14),(0, 3, 4, 8, 12, 14),(0, 3, 4, 10, 12, 14),(0, 3, 7, 8, 10, 14),(0, 4, 7, 9, 11, 14),(1, 2, 3, 7, 10, 13),(1, 2, 4, 5, 9, 11),(1, 2, 4, 7, 9, 11),(1, 2, 4, 9, 11, 14),(1, 2, 6, 8, 11, 13),(1, 2, 6, 8, 11, 14),(1, 2, 6, 9, 11, 14),(1, 2, 7, 9, 11, 14),(1, 3, 4, 6, 9, 12),(1, 3, 4, 6, 10, 12),(1, 3, 4, 7, 9, 14),(1, 3, 4, 7, 12, 14),(1, 3, 4, 9, 12, 14),(1, 3, 5, 7, 9, 14),(1, 3, 5, 7, 10, 13),(1, 3, 5, 7, 10, 14),(1, 3, 5, 7, 12, 14),(1, 3, 5, 9, 12, 14),(1, 3, 6, 7, 9, 13),(1, 3, 6, 8, 10, 13),(1, 3, 6, 10, 12, 13),(1, 3, 7, 8, 10, 13),(1, 3, 7, 8, 10, 14),(1, 3, 7, 9, 10, 14),(1, 4, 6, 8, 9, 11),(1, 4, 7, 9, 11, 14),(1, 4, 8, 9, 11, 14),(1, 4, 9, 11, 12, 14),(1, 5, 7, 9, 11, 14),(1, 5, 9, 11, 12, 14),(2, 3, 4, 7, 10, 14),(2, 3, 4, 8, 12, 14),(2, 3, 7, 8, 11, 14),(2, 3, 7, 9, 11, 14),(2, 3, 7, 10, 11, 14),(2, 3, 7, 10, 13, 14),(2, 4, 7, 8, 11, 14),(2, 4, 7, 9, 11, 14),(2, 4, 7, 10, 11, 14),(2, 4, 7, 11, 12, 14),(2, 4, 9, 11, 13, 14),(2, 5, 7, 8, 11, 14),(2, 5, 7, 9, 11, 14),(2, 6, 7, 8, 11, 14),(2, 6, 7, 9, 11, 14),(2, 6, 8, 11, 12, 14),(2, 6, 8, 11, 13, 14),(2, 6, 9, 11, 12, 14),(2, 6, 9, 11, 13, 14),(2, 7, 8, 9, 11, 14),(2, 7, 8, 11, 12, 14),(2, 7, 9, 10, 11, 14),(2, 7, 9, 11, 12, 14),(2, 7, 9, 11, 13, 14),(3, 4, 7, 8, 12, 14),(3, 4, 7, 10, 12, 14),(3, 4, 7, 11, 12, 14),(3, 4, 8, 9, 12, 14),(3, 4, 8, 10, 12, 14),(3, 5, 7, 8, 12, 14),(3, 5, 7, 8, 13, 14),(3, 5, 7, 11, 12, 14),(3, 6, 8, 10, 13, 14),(3, 7, 8, 10, 12, 14),(3, 7, 8, 10, 13, 14),(3, 7, 10, 11, 12, 14),(4, 7, 9, 11, 13, 14)]
for n in lista:
	gerador.addRegra(ValidacaoAnalise.compararChaveOperacaoPosicoes, anterior = ultimo, posicoes = n, operandos = ['-' for x in range(len(n) - 1)])
# '*'
lista = [(1, 3, 5, 6, 10),(1, 3, 5, 7, 10),(1, 3, 6, 9, 13),(1, 3, 7, 9, 14),(1, 4, 6, 9, 11),(1, 4, 9, 10, 11),(2, 3, 6, 10, 13),(2, 3, 7, 10, 13),(2, 4, 7, 8, 11),(2, 4, 7, 9, 11),(2, 4, 9, 11, 13),(2, 5, 7, 10, 11),(2, 7, 9, 11, 14),(2, 7, 11, 12, 14),(3, 4, 7, 10, 12),(3, 4, 9, 10, 13),(3, 6, 8, 10, 13),(3, 7, 8, 10, 12),(3, 7, 8, 10, 13)]
for n in lista:
	gerador.addRegra(ValidacaoAnalise.compararChaveOperacaoPosicoes, anterior = ultimo, posicoes = n, operandos = ['*' for x in range(len(n) - 1)])
# '/'
lista = [(1, 3, 5, 7, 10)]
for n in lista:
	gerador.addRegra(ValidacaoAnalise.compararChaveOperacaoPosicoes, anterior = ultimo, posicoes = n, operandos = ['/' for x in range(len(n) - 1)])
# '+'
lista = [(1, 3, 5, 6, 10),(1, 3, 5, 7, 10),(1, 3, 6, 9, 13),(1, 4, 6, 9, 11),(1, 4, 9, 10, 11),(2, 3, 6, 10, 13),(2, 3, 7, 10, 13),(2, 4, 7, 8, 11),(2, 4, 7, 9, 11),(2, 4, 9, 11, 13),(2, 5, 7, 10, 11),(2, 7, 9, 11, 14),(2, 7, 11, 12, 14),(3, 4, 7, 10, 12),(3, 4, 9, 10, 13),(3, 6, 8, 10, 13),(3, 7, 8, 10, 12),(3, 7, 8, 10, 13)]
for n in lista:
	gerador.addRegra(ValidacaoAnalise.compararChaveOperacaoPosicoes, anterior = ultimo, posicoes = n, operandos = ['+' for x in range(len(n) - 1)])



lista = [[(2, 7, 9, 11, 14), ('-', '-', '-', '-')],[(1, 4, 6, 9, 11), ('-', '-', '-', '+')],[(1, 4, 9, 10, 11), ('-', '-', '-', '+')],[(1, 3, 5, 6, 10), ('-', '-', '-', '*')],[(1, 3, 5, 7, 10), ('-', '-', '-', '*')],[(1, 3, 6, 9, 13), ('-', '-', '-', '*')],[(1, 3, 7, 9, 14), ('-', '-', '-', '*')],[(1, 4, 6, 9, 11), ('-', '-', '-', '*')],[(1, 4, 9, 10, 11), ('-', '-', '-', '*')],[(2, 3, 6, 10, 13), ('-', '-', '-', '*')],[(2, 3, 7, 10, 13), ('-', '-', '-', '*')],[(2, 4, 7, 9, 11), ('-', '-', '-', '*')],[(2, 4, 9, 11, 13), ('-', '-', '-', '*')],[(2, 5, 7, 10, 11), ('-', '-', '-', '*')],[(2, 7, 9, 11, 14), ('-', '-', '-', '*')],[(2, 7, 11, 12, 14), ('-', '-', '-', '*')],[(3, 4, 7, 10, 12), ('-', '-', '-', '*')],[(3, 4, 9, 10, 13), ('-', '-', '-', '*')],[(3, 6, 8, 10, 13), ('-', '-', '-', '*')],[(3, 7, 8, 10, 12), ('-', '-', '-', '*')],[(3, 7, 8, 10, 13), ('-', '-', '-', '*')],[(1, 3, 5, 7, 10), ('-', '-', '+', '+')],[(1, 4, 9, 10, 11), ('-', '-', '+', '+')],[(2, 4, 9, 11, 13), ('-', '-', '+', '+')],[(2, 7, 11, 12, 14), ('-', '-', '+', '+')],[(3, 6, 8, 10, 13), ('-', '-', '+', '+')],[(1, 3, 5, 6, 10), ('-', '-', '+', '*')],[(1, 3, 5, 7, 10), ('-', '-', '+', '*')],[(1, 3, 6, 9, 13), ('-', '-', '+', '*')],[(1, 3, 7, 9, 14), ('-', '-', '+', '*')],[(1, 4, 6, 9, 11), ('-', '-', '+', '*')],[(1, 4, 9, 10, 11), ('-', '-', '+', '*')],[(2, 3, 6, 10, 13), ('-', '-', '+', '*')],[(2, 3, 7, 10, 13), ('-', '-', '+', '*')],[(2, 4, 7, 8, 11), ('-', '-', '+', '*')],[(2, 4, 7, 9, 11), ('-', '-', '+', '*')],[(2, 4, 9, 11, 13), ('-', '-', '+', '*')],[(2, 5, 7, 10, 11), ('-', '-', '+', '*')],[(2, 7, 9, 11, 14), ('-', '-', '+', '*')],[(2, 7, 11, 12, 14), ('-', '-', '+', '*')],[(3, 4, 7, 10, 12), ('-', '-', '+', '*')],[(3, 4, 9, 10, 13), ('-', '-', '+', '*')],[(3, 6, 8, 10, 13), ('-', '-', '+', '*')],[(3, 7, 8, 10, 12), ('-', '-', '+', '*')],[(3, 7, 8, 10, 13), ('-', '-', '+', '*')],[(1, 3, 5, 6, 10), ('-', '-', '*', '*')],[(1, 3, 5, 7, 10), ('-', '-', '*', '*')],[(1, 3, 6, 9, 13), ('-', '-', '*', '*')],[(1, 3, 7, 9, 14), ('-', '-', '*', '*')],[(1, 4, 6, 9, 11), ('-', '-', '*', '*')],[(1, 4, 9, 10, 11), ('-', '-', '*', '*')],[(2, 3, 6, 10, 13), ('-', '-', '*', '*')],[(2, 3, 7, 10, 13), ('-', '-', '*', '*')],[(2, 4, 7, 8, 11), ('-', '-', '*', '*')],[(2, 4, 7, 9, 11), ('-', '-', '*', '*')],[(2, 4, 9, 11, 13), ('-', '-', '*', '*')],[(2, 5, 7, 10, 11), ('-', '-', '*', '*')],[(2, 7, 9, 11, 14), ('-', '-', '*', '*')],[(2, 7, 11, 12, 14), ('-', '-', '*', '*')],[(3, 4, 7, 10, 12), ('-', '-', '*', '*')],[(3, 4, 9, 10, 13), ('-', '-', '*', '*')],[(3, 6, 8, 10, 13), ('-', '-', '*', '*')],[(3, 7, 8, 10, 12), ('-', '-', '*', '*')],[(3, 7, 8, 10, 13), ('-', '-', '*', '*')],[(1, 3, 5, 7, 10), ('-', '-', '*', '/')],[(1, 3, 5, 6, 10), ('-', '+', '+', '+')],[(1, 4, 6, 9, 11), ('-', '+', '+', '+')],[(1, 4, 9, 10, 11), ('-', '+', '+', '+')],[(2, 4, 9, 11, 13), ('-', '+', '+', '+')],[(2, 5, 7, 10, 11), ('-', '+', '+', '+')],[(2, 7, 11, 12, 14), ('-', '+', '+', '+')],[(3, 4, 9, 10, 13), ('-', '+', '+', '+')],[(3, 6, 8, 10, 13), ('-', '+', '+', '+')],[(3, 7, 8, 10, 12), ('-', '+', '+', '+')],[(3, 7, 8, 10, 13), ('-', '+', '+', '+')],[(1, 3, 5, 6, 10), ('-', '+', '+', '*')],[(1, 3, 5, 7, 10), ('-', '+', '+', '*')],[(1, 3, 6, 9, 13), ('-', '+', '+', '*')],[(1, 3, 7, 9, 14), ('-', '+', '+', '*')],[(1, 4, 6, 9, 11), ('-', '+', '+', '*')],[(1, 4, 9, 10, 11), ('-', '+', '+', '*')],[(2, 3, 6, 10, 13), ('-', '+', '+', '*')],[(2, 3, 7, 10, 13), ('-', '+', '+', '*')],[(2, 4, 7, 8, 11), ('-', '+', '+', '*')],[(2, 4, 7, 9, 11), ('-', '+', '+', '*')],[(2, 4, 9, 11, 13), ('-', '+', '+', '*')],[(2, 5, 7, 10, 11), ('-', '+', '+', '*')],[(2, 7, 9, 11, 14), ('-', '+', '+', '*')],[(2, 7, 11, 12, 14), ('-', '+', '+', '*')],[(3, 4, 7, 10, 12), ('-', '+', '+', '*')],[(3, 4, 9, 10, 13), ('-', '+', '+', '*')],[(3, 6, 8, 10, 13), ('-', '+', '+', '*')],[(3, 7, 8, 10, 12), ('-', '+', '+', '*')],[(3, 7, 8, 10, 13), ('-', '+', '+', '*')],[(1, 3, 5, 6, 10), ('-', '+', '*', '*')],[(1, 3, 5, 7, 10), ('-', '+', '*', '*')],[(1, 3, 6, 9, 13), ('-', '+', '*', '*')],[(1, 3, 7, 9, 14), ('-', '+', '*', '*')],[(1, 4, 6, 9, 11), ('-', '+', '*', '*')],[(1, 4, 9, 10, 11), ('-', '+', '*', '*')],[(2, 3, 6, 10, 13), ('-', '+', '*', '*')],[(2, 3, 7, 10, 13), ('-', '+', '*', '*')],[(2, 4, 7, 8, 11), ('-', '+', '*', '*')],[(2, 4, 7, 9, 11), ('-', '+', '*', '*')],[(2, 4, 9, 11, 13), ('-', '+', '*', '*')],[(2, 5, 7, 10, 11), ('-', '+', '*', '*')],[(2, 7, 9, 11, 14), ('-', '+', '*', '*')],[(2, 7, 11, 12, 14), ('-', '+', '*', '*')],[(3, 4, 7, 10, 12), ('-', '+', '*', '*')],[(3, 4, 9, 10, 13), ('-', '+', '*', '*')],[(3, 6, 8, 10, 13), ('-', '+', '*', '*')],[(3, 7, 8, 10, 12), ('-', '+', '*', '*')],[(3, 7, 8, 10, 13), ('-', '+', '*', '*')],[(1, 3, 5, 7, 10), ('-', '+', '*', '/')],[(1, 3, 5, 6, 10), ('-', '*', '*', '*')],[(1, 3, 5, 7, 10), ('-', '*', '*', '*')],[(1, 3, 6, 9, 13), ('-', '*', '*', '*')],[(1, 3, 7, 9, 14), ('-', '*', '*', '*')],[(1, 4, 6, 9, 11), ('-', '*', '*', '*')],[(1, 4, 9, 10, 11), ('-', '*', '*', '*')],[(2, 3, 6, 10, 13), ('-', '*', '*', '*')],[(2, 3, 7, 10, 13), ('-', '*', '*', '*')],[(2, 4, 7, 8, 11), ('-', '*', '*', '*')],[(2, 4, 7, 9, 11), ('-', '*', '*', '*')],[(2, 4, 9, 11, 13), ('-', '*', '*', '*')],[(2, 5, 7, 10, 11), ('-', '*', '*', '*')],[(2, 7, 9, 11, 14), ('-', '*', '*', '*')],[(2, 7, 11, 12, 14), ('-', '*', '*', '*')],[(3, 4, 7, 10, 12), ('-', '*', '*', '*')],[(3, 4, 9, 10, 13), ('-', '*', '*', '*')],[(3, 6, 8, 10, 13), ('-', '*', '*', '*')],[(3, 7, 8, 10, 12), ('-', '*', '*', '*')],[(3, 7, 8, 10, 13), ('-', '*', '*', '*')],[(1, 3, 5, 7, 10), ('-', '*', '*', '/')],[(1, 3, 5, 7, 10), ('-', '*', '/', '/')]]
for it in lista:
	gerador.addRegra(ValidacaoAnalise.compararChaveOperacaoPosicoes, anterior = ultimo, posicoes = it[0], operandos = it[1])

ultima_fatoracao = fatorarAnteriores(ultimo, sorteios[-21:-1])
gerador.addRegra(ValidacaoAnalise.compararFatoracaoIgual, lista_comparacao = ultima_fatoracao, ultimos_sorteios = sorteios[-20:])



# Deve ser gerado todas as vezes, com base na anÃ¡lise
################################################################## => Processos a serem rodados manualmente
# for n in combinations(sorteios[-1].numeros, 1):
# 	print(n)
# 	print(analise.verificarNaoAcontecimentosPorNumeros(n, True))
# 	break

# for n in combinations(ultimo.numeros, 6):
# 	retorno = analise.verificarQuantidadeRepeticoes(n, True)
# 	if retorno['valido'] and retorno['MÃ¡ximo'] > 2:
# 		print(n)
# 		print(retorno)
################################################################## => Processos a serem rodados manualmente
# lista =  [[3, 7, 8, 13, 17, 21, 23, 24, 25], [3, 4, 7, 8, 9, 14, 16, 20, 23], [1, 4, 7, 8, 11, 16, 18, 21, 25], [11, 15, 16, 17, 18, 19, 20, 24, 25], [2, 4, 5, 11, 12, 13, 16, 17, 18], [1, 2, 6, 11, 12, 17, 18, 20, 22], [1, 6, 7, 9, 15, 16, 17, 22, 25], [2, 6, 10, 11, 14, 15, 22, 24, 25], [2, 3, 5, 7, 11, 16, 18, 21, 22], [2, 7, 10, 13, 15, 16, 21, 23, 24], [3, 8, 10, 15, 16, 19, 20, 21, 23], [4, 5, 7, 13, 14, 19, 21, 23, 25], [1, 4, 6, 7, 9, 14, 16, 19, 22], [3, 9, 10, 12, 15, 18, 19, 23, 25], [2, 3, 5, 9, 11, 15, 16, 19, 22], [3, 7, 11, 13, 16, 17, 21, 23, 24], [2, 4, 9, 11, 12, 18, 21, 22, 24], [1, 5, 9, 13, 19, 20, 21, 23, 24], [1, 3, 13, 15, 16, 19, 20, 23, 25], [5, 8, 9, 15, 17, 18, 20, 24, 25], [2, 3, 7, 8, 10, 15, 18, 20, 22], [6, 8, 9, 10, 11, 15, 16, 20, 23], [1, 2, 4, 7, 8, 13, 16, 17, 19], [5, 7, 12, 16, 19, 20, 21, 23, 24], [2, 3, 5, 6, 12, 13, 14, 16, 18], [5, 6, 15, 16, 18, 20, 21, 23, 25], [3, 4, 7, 8, 13, 15, 18, 19, 21], [1, 3, 7, 12, 14, 15, 16, 19, 25], [2, 3, 5, 15, 16, 18, 20, 21, 22], [1, 3, 10, 12, 16, 20, 21, 22, 23], [4, 6, 7, 8, 10, 11, 13, 18, 23], [2, 4, 9, 12, 15, 17, 20, 22, 25], [3, 5, 8, 9, 14, 18, 19, 22, 23], [2, 3, 8, 11, 13, 14, 18, 19, 21], [9, 11, 14, 16, 17, 18, 19, 20, 24], [1, 3, 6, 14, 18, 19, 21, 23, 24], [3, 4, 5, 6, 7, 9, 10, 17, 23], [1, 3, 4, 5, 9, 12, 14, 24, 25], [4, 5, 8, 9, 10, 13, 15, 18, 22], [4, 6, 8, 9, 10, 13, 16, 17, 23], [8, 9, 13, 18, 19, 20, 21, 24, 25], [2, 5, 6, 8, 11, 12, 14, 15, 24], [2, 9, 10, 13, 14, 17, 18, 21, 24], [2, 4, 6, 7, 13, 14, 15, 16, 22], [2, 8, 12, 14, 15, 17, 18, 20, 24], [1, 2, 3, 6, 7, 8, 9, 12, 19], [3, 6, 8, 13, 14, 18, 19, 21, 22], [2, 3, 4, 9, 16, 17, 19, 20, 22], [6, 8, 9, 12, 18, 20, 21, 22, 25], [2, 4, 7, 8, 9, 15, 18, 20, 25], [4, 7, 11, 13, 17, 18, 20, 23, 24], [1, 4, 5, 6, 7, 8, 10, 22, 23], [1, 3, 4, 6, 15, 20, 21, 23, 24], [5, 6, 7, 9, 11, 15, 16, 17, 23], [2, 3, 5, 7, 9, 14, 18, 21, 22], [5, 8, 9, 15, 20, 21, 23, 24, 25], [1, 6, 9, 12, 14, 16, 21, 22, 23], [2, 5, 6, 8, 10, 11, 17, 19, 24], [3, 6, 9, 10, 11, 16, 22, 23, 24], [3, 6, 7, 16, 18, 20, 21, 22, 23], [3, 8, 12, 13, 14, 16, 18, 19, 21], [1, 2, 6, 7, 8, 15, 16, 19, 25], [1, 7, 11, 12, 16, 17, 21, 23, 25], [1, 2, 4, 8, 14, 19, 21, 22, 23], [2, 10, 12, 13, 14, 17, 19, 23, 24], [3, 5, 8, 9, 12, 15, 17, 23, 24], [5, 6, 7, 11, 12, 16, 19, 21, 23], [1, 6, 8, 10, 19, 21, 22, 23, 24], [1, 3, 9, 11, 12, 13, 15, 17, 23], [1, 2, 6, 8, 15, 16, 21, 23, 24], [2, 3, 5, 7, 9, 10, 12, 15, 19], [3, 4, 10, 15, 16, 17, 18, 22, 24], [4, 5, 6, 7, 10, 13, 15, 17, 23], [1, 2, 5, 7, 8, 12, 16, 18, 19], [2, 9, 10, 16, 18, 19, 20, 22, 24], [10, 15, 19, 20, 21, 22, 23, 24, 25], [3, 5, 6, 9, 16, 17, 19, 23, 24], [2, 4, 9, 10, 12, 13, 16, 19, 23], [1, 2, 14, 17, 19, 20, 21, 22, 23], [2, 6, 14, 15, 18, 21, 23, 24, 25], [7, 11, 12, 13, 14, 19, 22, 23, 24], [4, 6, 7, 14, 15, 16, 21, 23, 24], [1, 4, 5, 6, 8, 10, 17, 21, 22], [2, 3, 13, 14, 17, 21, 22, 23, 24], [1, 4, 6, 7, 13, 14, 17, 19, 25], [3, 6, 8, 9, 10, 12, 22, 23, 24], [1, 2, 3, 5, 8, 11, 19, 20, 24], [6, 9, 13, 14, 21, 22, 23, 24, 25], [1, 4, 6, 7, 9, 15, 16, 22, 25], [7, 9, 11, 15, 16, 17, 22, 23, 25], [3, 5, 6, 9, 10, 18, 19, 20, 24], [1, 3, 5, 7, 12, 13, 19, 24, 25], [5, 8, 9, 12, 16, 17, 18, 20, 24], [3, 6, 12, 14, 16, 17, 18, 23, 25], [1, 3, 4, 9, 12, 20, 21, 22, 23], [2, 3, 4, 6, 7, 8, 9, 13, 16], [1, 4, 8, 10, 15, 16, 19, 22, 24], [3, 5, 8, 10, 11, 14, 16, 21, 22], [1, 3, 6, 7, 8, 9, 16, 18, 25], [1, 5, 6, 7, 11, 13, 15, 17, 23], [1, 3, 10, 15, 17, 18, 20, 24, 25], [2, 3, 7, 11, 15, 19, 22, 23, 24], [2, 4, 6, 8, 9, 13, 15, 19, 21], [1, 2, 9, 10, 11, 18, 21, 23, 24], [1, 3, 10, 17, 19, 22, 23, 24, 25], [1, 5, 7, 11, 14, 17, 21, 22, 25], [3, 10, 11, 14, 16, 17, 19, 21, 25], [2, 3, 4, 6, 7, 14, 15, 17, 18], [6, 9, 14, 15, 17, 18, 21, 24, 25], [1, 2, 3, 9, 13, 16, 18, 21, 24], [1, 3, 6, 7, 12, 16, 18, 21, 23], [1, 4, 6, 11, 15, 20, 21, 23, 24], [1, 2, 6, 13, 17, 20, 22, 23, 25], [3, 8, 9, 14, 16, 20, 21, 23, 24], [2, 3, 8, 10, 11, 15, 17, 18, 24], [1, 8, 9, 11, 12, 14, 20, 23, 24], [2, 3, 6, 7, 11, 12, 15, 21, 23], [5, 6, 11, 12, 15, 16, 21, 23, 24], [1, 2, 5, 12, 13, 19, 20, 23, 25], [1, 11, 12, 13, 17, 20, 22, 23, 24], [3, 7, 13, 15, 16, 17, 21, 24, 25], [3, 6, 12, 13, 14, 18, 20, 22, 23], [2, 6, 7, 9, 10, 11, 16, 21, 23], [7, 11, 13, 16, 17, 18, 22, 23, 24], [3, 4, 5, 6, 7, 11, 16, 17, 23], [1, 3, 10, 17, 19, 21, 22, 23, 25], [2, 3, 4, 5, 6, 11, 16, 17, 23], [1, 3, 4, 5, 10, 16, 20, 24, 25], [2, 3, 5, 7, 9, 10, 21, 22, 23], [3, 8, 13, 15, 16, 17, 21, 22, 25], [1, 5, 6, 10, 13, 16, 21, 22, 25], [2, 13, 14, 18, 21, 22, 23, 24, 25], [1, 6, 9, 13, 18, 21, 23, 24, 25], [5, 7, 13, 14, 16, 21, 22, 23, 25], [1, 5, 6, 7, 17, 19, 22, 23, 25], [8, 9, 10, 13, 16, 20, 22, 23, 24], [4, 5, 6, 7, 8, 12, 16, 17, 21], [7, 11, 13, 14, 16, 17, 18, 24, 25], [5, 6, 8, 14, 15, 18, 21, 23, 25], [1, 3, 6, 7, 14, 16, 18, 19, 24], [3, 8, 9, 10, 14, 17, 19, 24, 25], [2, 7, 12, 16, 17, 19, 20, 21, 22], [3, 5, 6, 7, 15, 16, 18, 19, 22], [2, 4, 7, 8, 15, 18, 19, 21, 24], [1, 3, 6, 11, 12, 13, 15, 19, 22], [2, 4, 10, 13, 15, 16, 17, 20, 21], [1, 4, 7, 11, 15, 16, 17, 18, 21], [3, 6, 7, 14, 17, 18, 19, 21, 23], [1, 6, 9, 11, 13, 15, 16, 17, 20], [2, 6, 10, 11, 13, 16, 17, 24, 25], [3, 6, 7, 11, 15, 21, 23, 24, 25], [1, 4, 5, 8, 9, 11, 16, 17, 20], [2, 3, 4, 13, 14, 15, 18, 21, 23], [1, 5, 6, 10, 11, 12, 14, 21, 25], [3, 6, 9, 10, 11, 17, 18, 21, 24], [2, 3, 9, 11, 12, 15, 17, 19, 24], [3, 5, 6, 7, 10, 12, 16, 20, 21], [1, 2, 5, 6, 10, 17, 19, 23, 24], [1, 4, 6, 10, 13, 17, 21, 22, 23], [2, 3, 7, 12, 13, 14, 19, 22, 24], [2, 5, 9, 12, 18, 19, 21, 23, 24], [3, 5, 6, 9, 16, 17, 20, 23, 24], [2, 3, 6, 8, 9, 12, 13, 19, 23], [8, 9, 11, 12, 16, 18, 19, 22, 24], [1, 2, 5, 6, 7, 8, 15, 16, 19], [3, 4, 6, 8, 10, 15, 17, 21, 25], [2, 12, 13, 14, 17, 20, 21, 23, 25], [4, 6, 8, 11, 12, 13, 15, 16, 23], [2, 3, 10, 11, 12, 15, 17, 24, 25], [2, 3, 4, 7, 13, 15, 16, 18, 20], [4, 5, 7, 8, 11, 12, 16, 18, 25], [4, 5, 6, 8, 10, 17, 20, 21, 22], [3, 5, 6, 9, 14, 16, 18, 20, 22], [2, 4, 5, 6, 8, 9, 10, 11, 13], [7, 8, 13, 14, 15, 18, 19, 20, 24], [2, 3, 12, 13, 14, 19, 20, 21, 22], [1, 10, 11, 13, 15, 18, 20, 23, 25], [4, 6, 8, 9, 10, 16, 18, 20, 24], [2, 6, 8, 10, 14, 15, 17, 24, 25], [2, 4, 11, 14, 15, 16, 17, 18, 19], [1, 4, 12, 13, 14, 18, 19, 21, 23], [2, 3, 5, 6, 11, 13, 14, 16, 17], [2, 5, 10, 13, 14, 15, 18, 23, 25], [1, 8, 9, 14, 15, 18, 22, 23, 24], [1, 6, 11, 14, 15, 16, 17, 21, 23], [2, 7, 8, 10, 11, 15, 17, 19, 25], [2, 4, 5, 6, 8, 13, 17, 18, 21], [1, 6, 9, 11, 13, 17, 20, 21, 24], [7, 13, 15, 16, 19, 21, 23, 24, 25], [2, 4, 6, 7, 8, 11, 14, 21, 22], [2, 4, 8, 9, 10, 13, 17, 21, 24], [1, 2, 3, 10, 11, 15, 16, 19, 24], [1, 4, 7, 13, 14, 15, 16, 18, 22], [2, 3, 4, 6, 10, 13, 14, 22, 24], [4, 6, 7, 9, 10, 16, 17, 21, 23], [3, 6, 7, 9, 12, 18, 21, 23, 25], [8, 10, 11, 13, 16, 17, 18, 20, 24], [3, 6, 7, 8, 10, 16, 17, 24, 25], [4, 6, 7, 8, 10, 15, 17, 18, 20], [4, 6, 8, 10, 11, 12, 15, 18, 24], [1, 4, 6, 7, 8, 9, 13, 19, 23], [2, 3, 6, 10, 11, 13, 14, 22, 24], [2, 3, 5, 8, 12, 13, 14, 19, 22], [2, 3, 4, 5, 8, 12, 18, 19, 24], [1, 4, 7, 11, 12, 15, 21, 23, 25], [1, 5, 6, 8, 13, 17, 19, 23, 25], [3, 7, 8, 10, 12, 14, 16, 20, 22], [2, 3, 8, 12, 15, 17, 19, 21, 24], [2, 4, 7, 8, 9, 16, 19, 20, 24], [4, 7, 13, 15, 16, 20, 21, 23, 24], [4, 7, 8, 12, 14, 19, 20, 21, 25], [2, 6, 8, 10, 12, 13, 16, 19, 22], [1, 2, 7, 9, 10, 18, 21, 23, 24], [1, 5, 9, 10, 12, 14, 16, 18, 23], [1, 5, 8, 9, 16, 20, 21, 23, 24], [1, 9, 12, 15, 19, 20, 21, 23, 25], [1, 2, 7, 10, 15, 19, 21, 23, 24], [1, 3, 4, 6, 7, 9, 15, 19, 20], [3, 5, 12, 13, 16, 19, 20, 23, 24], [3, 5, 8, 9, 15, 17, 19, 21, 24], [1, 4, 6, 8, 10, 19, 22, 23, 25], [5, 8, 9, 12, 14, 19, 20, 21, 24], [4, 6, 8, 11, 12, 15, 18, 23, 25], [1, 10, 12, 15, 19, 21, 22, 23, 25], [1, 6, 15, 16, 18, 21, 22, 24, 25], [7, 9, 11, 12, 13, 14, 22, 24, 25], [1, 2, 4, 6, 13, 14, 15, 16, 24], [1, 3, 5, 6, 8, 9, 14, 16, 19], [1, 4, 6, 8, 14, 15, 18, 22, 23], [1, 3, 7, 9, 11, 15, 16, 19, 25], [1, 2, 4, 5, 8, 10, 12, 13, 15], [5, 6, 8, 11, 13, 15, 16, 23, 25], [4, 6, 8, 9, 15, 16, 18, 21, 24], [2, 8, 12, 15, 17, 19, 21, 22, 24], [2, 5, 6, 10, 11, 13, 14, 16, 21], [4, 6, 8, 9, 10, 15, 16, 17, 21], [1, 2, 8, 14, 15, 17, 18, 21, 23], [1, 2, 16, 17, 18, 19, 20, 21, 24], [1, 6, 12, 13, 17, 18, 20, 23, 25], [1, 3, 5, 7, 11, 13, 14, 17, 18], [2, 3, 4, 8, 10, 12, 17, 22, 23], [1, 7, 8, 9, 12, 13, 16, 23, 25], [2, 3, 5, 12, 15, 16, 22, 24, 25], [2, 4, 5, 10, 13, 15, 16, 23, 25], [1, 9, 10, 12, 14, 16, 19, 22, 25], [2, 3, 4, 6, 7, 12, 13, 16, 22], [4, 7, 10, 11, 15, 19, 21, 22, 23], [6, 10, 11, 12, 15, 16, 20, 21, 23], [6, 7, 8, 9, 11, 14, 19, 23, 24], [7, 8, 14, 15, 16, 17, 18, 21, 24]]
# for n in lista:
# 	gerador.addRegra(ValidacaoAnalise.verificarContem, lista = [n])


gerador.addRegra(ValidacaoAnalise.verificarPosicaoESomaOutros, posicao = 10, qtd_soma = 2)
gerador.addRegra(ValidacaoAnalise.verificarPosicaoESomaOutros, posicao = 11, qtd_soma = 2)
gerador.addRegra(ValidacaoAnalise.verificarPosicaoESomaOutros, posicao = 12, qtd_soma = 2)
gerador.addRegra(ValidacaoAnalise.verificarPosicaoESomaOutros, posicao = 13, qtd_soma = 2)
gerador.addRegra(ValidacaoAnalise.verificarPosicaoESomaOutros, posicao = 14, qtd_soma = 2)

gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 13, 14), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 13, 14), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (0, 1, 2, 3, 4, 5, 7, 8, 10, 11, 13, 14), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (0, 1, 2, 3, 4, 5, 7, 9, 10, 11, 13, 14), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (0, 1, 2, 3, 4, 5, 7, 9, 11, 12, 13, 14), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 13, 14), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (1, 2, 3, 4, 5, 6, 7, 9, 10, 12, 13, 14), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (1, 2, 3, 4, 5, 6, 7, 9, 11, 12, 13, 14), anterior = ultimo)


gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (3, 4, 6, 9, 14), posicoes_chave = (1, 10), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (3, 4, 12, 13, 14), posicoes_chave = (1, 10), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (3, 6, 7, 10, 14), posicoes_chave = (2, 9), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (1, 3, 4, 13, 14), posicoes_chave = (2, 10), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (3, 4, 7, 8, 9), posicoes_chave = (2, 10), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (3, 4, 7, 13, 14), posicoes_chave = (2, 10), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (3, 7, 8, 10, 14), posicoes_chave = (2, 11), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (1, 2, 5, 10, 13), posicoes_chave = (3, 7), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (1, 5, 10, 13, 14), posicoes_chave = (3, 7), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (1, 5, 12, 13, 14), posicoes_chave = (3, 7), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (2, 5, 10, 13, 14), posicoes_chave = (3, 7), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (5, 8, 10, 13, 14), posicoes_chave = (3, 7), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (1, 4, 6, 12, 14), posicoes_chave = (3, 9), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (1, 8, 12, 13, 14), posicoes_chave = (3, 9), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (2, 4, 7, 13, 14), posicoes_chave = (3, 10), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (2, 7, 8, 13, 14), posicoes_chave = (3, 10), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (0, 3, 10, 12, 14), posicoes_chave = (4, 7), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (1, 3, 10, 12, 14), posicoes_chave = (4, 7), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (1, 3, 5, 12, 14), posicoes_chave = (4, 9), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (1, 3, 6, 12, 14), posicoes_chave = (4, 9), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (1, 3, 12, 13, 14), posicoes_chave = (4, 9), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (1, 11, 12, 13, 14), posicoes_chave = (4, 9), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (2, 3, 6, 12, 14), posicoes_chave = (4, 9), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (3, 5, 8, 12, 14), posicoes_chave = (4, 9), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (3, 6, 8, 12, 14), posicoes_chave = (4, 9), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (3, 8, 12, 13, 14), posicoes_chave = (4, 9), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (0, 3, 6, 7, 12), posicoes_chave = (4, 10), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (0, 3, 7, 12, 14), posicoes_chave = (4, 10), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (1, 3, 7, 12, 14), posicoes_chave = (4, 10), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (2, 3, 7, 12, 14), posicoes_chave = (4, 10), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (2, 3, 7, 13, 14), posicoes_chave = (4, 10), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (2, 3, 11, 12, 14), posicoes_chave = (4, 10), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (3, 7, 8, 12, 14), posicoes_chave = (4, 10), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (0, 2, 3, 9, 12), posicoes_chave = (4, 11), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (0, 2, 9, 12, 14), posicoes_chave = (4, 11), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (1, 2, 3, 12, 14), posicoes_chave = (4, 11), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (1, 2, 9, 12, 14), posicoes_chave = (4, 11), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (1, 2, 10, 12, 14), posicoes_chave = (4, 11), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (2, 3, 5, 12, 14), posicoes_chave = (4, 11), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (2, 3, 6, 12, 14), posicoes_chave = (4, 11), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (2, 3, 6, 13, 14), posicoes_chave = (5, 9), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (3, 8, 10, 13, 14), posicoes_chave = (6, 9), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (1, 3, 5, 13, 14), posicoes_chave = (6, 10), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (2, 3, 7, 13, 14), posicoes_chave = (6, 10), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (2, 3, 8, 13, 14), posicoes_chave = (6, 10), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (2, 3, 4, 13, 14), posicoes_chave = (7, 10), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (2, 3, 6, 13, 14), posicoes_chave = (7, 10), anterior = ultimo)
gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicao, posicoes = (1, 3, 4, 5, 14), posicoes_chave = (10, 13), anterior = ultimo)


lista = [[[(3, 5, 7)], (1, 4, 10)],[[(3, 6, 12)], (1, 4, 10)],[[(2, 3, 13)], (1, 6, 10)],[[(5, 11, 14)], (1, 6, 10)],[[(8, 11, 14)], (1, 6, 10)],[[(3, 5, 7)], (2, 4, 10)],[[(2, 3, 13)], (2, 7, 10)],[[(1, 10, 13)], (3, 6, 9)],[[(0, 2, 13)], (3, 7, 10)],[[(2, 10, 13)], (3, 7, 12)],[[(5, 7, 8)], (3, 10, 13)],[[(3, 8, 14)], (4, 7, 12)],[[(3, 6, 12)], (4, 8, 10)],[[(3, 12, 14)], (4, 8, 10)],[[(3, 7, 12)], (4, 10, 12)],[[(2, 7, 10, 13)], (3, 7, 12)],[[(2, 5, 9, 11)], (4, 6, 12)],[[(1, 7, 14)], (0, 3, 6, 9)],[[(8, 11, 12)], (0, 3, 6, 9)],[[(2, 10, 13)], (0, 3, 7, 12)],[[(9, 10, 11)], (0, 4, 7, 10)],[[(2, 3, 13)], (1, 2, 6, 10)],[[(6, 9, 14)], (1, 3, 5, 10)],[[(1, 4, 14)], (1, 3, 6, 9)],[[(4, 10, 14)], (1, 3, 6, 9)],[[(8, 11, 12)], (1, 3, 6, 9)],[[(0, 10, 14)], (1, 3, 7, 9)],[[(2, 7, 13)], (1, 3, 7, 10)],[[(7, 8, 12)], (1, 3, 8, 10)],[[(1, 3, 6)], (1, 4, 5, 10)],[[(4, 9, 11)], (1, 4, 5, 10)],[[(0, 3, 9)], (1, 4, 6, 9)],[[(2, 3, 4)], (1, 4, 6, 9)],[[(3, 6, 14)], (1, 4, 6, 9)],[[(4, 11, 12)], (1, 4, 6, 9)],[[(9, 11, 12)], (1, 4, 6, 9)],[[(2, 3, 13)], (1, 4, 6, 10)],[[(3, 9, 13)], (1, 4, 6, 10)],[[(4, 5, 10)], (1, 4, 6, 11)],[[(3, 13, 14)], (1, 4, 7, 9)],[[(2, 6, 11)], (1, 4, 7, 10)],[[(2, 6, 10)], (1, 4, 7, 11)],[[(1, 3, 14)], (1, 4, 8, 10)],[[(7, 11, 12)], (1, 4, 8, 10)],[[(3, 5, 7)], (1, 4, 9, 10)],[[(9, 11, 14)], (1, 4, 9, 10)],[[(2, 6, 7)], (1, 4, 9, 11)],[[(5, 13, 14)], (1, 4, 9, 11)],[[(2, 3, 11)], (1, 4, 9, 12)],[[(1, 2, 11)], (1, 4, 9, 13)],[[(4, 5, 11)], (1, 4, 9, 14)],[[(4, 5, 14)], (1, 4, 10, 11)],[[(3, 8, 9)], (1, 4, 10, 12)],[[(5, 11, 14)], (1, 4, 10, 13)],[[(3, 8, 12)], (1, 4, 10, 14)],[[(8, 11, 14)], (1, 5, 6, 10)],[[(0, 13, 14)], (1, 5, 9, 11)],[[(5, 13, 14)], (1, 5, 10, 11)],[[(10, 11, 14)], (1, 6, 8, 10)],[[(0, 9, 11)], (1, 6, 9, 14)],[[(4, 11, 14)], (1, 7, 9, 12)],[[(4, 6, 12)], (2, 3, 5, 11)],[[(1, 9, 12)], (2, 4, 6, 11)],[[(0, 6, 11)], (2, 4, 7, 10)],[[(3, 5, 7)], (2, 4, 7, 10)],[[(9, 10, 11)], (2, 4, 7, 10)],[[(5, 6, 9)], (2, 4, 7, 11)],[[(1, 3, 4)], (2, 4, 7, 12)],[[(3, 10, 13)], (2, 4, 7, 12)],[[(11, 12, 14)], (2, 4, 7, 12)],[[(7, 11, 14)], (2, 4, 8, 11)],[[(3, 5, 7)], (2, 4, 9, 10)],[[(2, 3, 12)], (2, 4, 9, 11)],[[(10, 13, 14)], (2, 4, 9, 11)],[[(4, 11, 14)], (2, 4, 9, 13)],[[(0, 3, 9)], (2, 4, 10, 13)],[[(4, 9, 12)], (2, 5, 6, 11)],[[(0, 1, 12)], (2, 5, 7, 11)],[[(2, 3, 12)], (2, 5, 7, 11)],[[(5, 6, 9)], (2, 5, 7, 11)],[[(9, 10, 13)], (2, 5, 7, 11)],[[(7, 11, 14)], (2, 5, 8, 11)],[[(7, 9, 10)], (2, 5, 9, 11)],[[(7, 11, 13)], (2, 5, 9, 12)],[[(3, 6, 8)], (2, 5, 10, 13)],[[(1, 3, 7)], (2, 6, 8, 12)],[[(1, 6, 11)], (2, 6, 8, 13)],[[(3, 10, 13)], (2, 6, 9, 13)],[[(8, 11, 12)], (2, 6, 10, 13)],[[(9, 12, 13)], (2, 6, 11, 13)],[[(9, 10, 14)], (2, 7, 10, 11)],[[(0, 4, 5)], (2, 7, 11, 12)],[[(3, 5, 6)], (2, 7, 11, 12)],[[(6, 8, 12)], (2, 7, 11, 12)],[[(1, 8, 12)], (2, 7, 11, 14)],[[(11, 12, 14)], (2, 7, 12, 14)],[[(5, 6, 13)], (2, 9, 11, 13)],[[(2, 10, 12)], (3, 4, 7, 10)],[[(2, 10, 13)], (3, 4, 7, 12)],[[(1, 12, 14)], (3, 4, 8, 10)],[[(9, 10, 14)], (3, 4, 9, 12)],[[(1, 4, 14)], (3, 4, 10, 12)],[[(0, 4, 9)], (3, 4, 10, 13)],[[(2, 4, 6)], (3, 4, 10, 13)],[[(5, 6, 7)], (3, 4, 10, 13)],[[(10, 12, 14)], (3, 4, 10, 13)],[[(2, 5, 13)], (3, 5, 6, 10)],[[(8, 13, 14)], (3, 5, 6, 10)],[[(2, 6, 7)], (3, 5, 7, 10)],[[(0, 2, 12)], (3, 5, 7, 11)],[[(1, 5, 14)], (3, 5, 7, 12)],[[(2, 10, 13)], (3, 5, 7, 12)],[[(5, 6, 12)], (3, 5, 8, 10)],[[(1, 9, 14)], (3, 5, 9, 12)],[[(4, 6, 14)], (3, 5, 9, 12)],[[(1, 5, 9)], (3, 5, 10, 13)],[[(2, 6, 12)], (3, 5, 11, 14)],[[(1, 8, 13)], (3, 6, 8, 10)],[[(4, 12, 14)], (3, 6, 8, 10)],[[(2, 3, 4)], (3, 6, 8, 12)],[[(0, 1, 13)], (3, 6, 9, 12)],[[(0, 11, 12)], (3, 6, 9, 13)],[[(3, 8, 10)], (3, 6, 9, 13)],[[(1, 9, 13)], (3, 6, 9, 14)],[[(4, 9, 12)], (3, 6, 9, 14)],[[(0, 2, 6)], (3, 6, 10, 13)],[[(2, 3, 6)], (3, 6, 10, 13)],[[(3, 8, 14)], (3, 6, 10, 13)],[[(8, 9, 12)], (3, 6, 10, 13)],[[(1, 2, 12)], (3, 7, 8, 10)],[[(2, 6, 13)], (3, 7, 8, 10)],[[(6, 7, 13)], (3, 7, 8, 10)],[[(2, 8, 10)], (3, 7, 8, 12)],[[(4, 12, 14)], (3, 7, 10, 11)],[[(4, 7, 14)], (3, 7, 10, 12)],[[(0, 2, 13)], (3, 7, 10, 13)],[[(2, 3, 10)], (3, 7, 10, 13)],[[(3, 7, 8)], (3, 7, 10, 13)],[[(6, 8, 13)], (3, 7, 10, 13)],[[(2, 10, 13)], (3, 7, 12, 14)],[[(1, 10, 14)], (3, 8, 10, 13)],[[(6, 9, 13)], (3, 8, 10, 13)],[[(1, 3, 12)], (4, 5, 6, 10)],[[(3, 10, 14)], (4, 5, 9, 13)],[[(0, 3, 14)], (4, 6, 7, 12)],[[(5, 8, 11)], (4, 6, 7, 12)],[[(1, 3, 12)], (4, 6, 9, 11)],[[(0, 10, 11)], (4, 6, 9, 13)],[[(3, 9, 14)], (4, 6, 9, 13)],[[(0, 3, 8)], (4, 6, 10, 12)],[[(2, 11, 12)], (4, 7, 9, 10)],[[(2, 7, 8)], (4, 7, 9, 11)],[[(2, 3, 10)], (4, 7, 9, 12)],[[(8, 11, 14)], (4, 7, 9, 12)],[[(3, 4, 7)], (4, 7, 10, 12)],[[(1, 8, 11)], (4, 7, 10, 13)],[[(2, 5, 12)], (4, 7, 11, 13)],[[(3, 13, 14)], (4, 8, 9, 12)],[[(0, 3, 8)], (4, 9, 10, 13)],[[(2, 5, 10)], (4, 9, 11, 13)],[[(4, 12, 14)], (5, 7, 9, 11)]]
for [posicoes, posicoes_chave] in lista:
	gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicaoV2, anterior = ultimo, posicoes = posicoes, posicoes_chave = posicoes_chave, modo = 'M1')

lista = [[[(3, 7, 13)], (2, 7, 10)]]
for [posicoes, posicoes_chave] in lista:
	gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicaoV2, anterior = ultimo, posicoes = posicoes, posicoes_chave = posicoes_chave, modo = '')

lista = []
for [posicoes, posicoes_chave] in lista:
	gerador.addRegra(ValidacaoAnalise.verificarCaracteristicasPosicaoV2, anterior = ultimo, posicoes = posicoes, posicoes_chave = posicoes_chave, modo = 'M2')


lista = [[(0, 1), ('-',), [-2, -7, -6, -5, -4, -3, -1]], [(0, 1), ('+',), [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]], [(0, 2), ('-',), [-10, -9, -8, -7, -6, -5, -4, -3, -2]], [(0, 2), ('+',), [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]], [(0, 3), ('-',), [-12, -11, -10, -9, -8, -7, -6, -5, -4, -3]], [(0, 3), ('+',), [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]], [(0, 4), ('-',), [-13, -12, -11, -10, -9, -8, -7, -6, -5, -4]], [(0, 4), ('+',), [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]], [(0, 5), ('-',), [-14, -13, -12, -11, -10, -9, -8, -7, -6, -5]], [(0, 5), ('+',), [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]], [(0, 6), ('-',), [-15, -14, -13, -12, -11, -10, -9, -8, -7, -6]], [(0, 6), ('+',), [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]], [(0, 7), ('-',), [-17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7]], [(0, 7), ('+',), [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]], [(0, 8), ('-',), [-18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8]], [(0, 8), ('+',), [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]], [(0, 9), ('-',), [-19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9]], [(0, 9), ('+',), [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]], [(0, 10), ('-',), [-20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10]], [(0, 10), ('+',), [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]], [(0, 11), ('-',), [-21, -20, -19, -18, -17, -16, -15, -14, -13, -12]], [(0, 11), ('+',), [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]], [(0, 12), ('-',), [-22, -21, -20, -19, -18, -17, -16, -15, -14, -13]], [(0, 12), ('+',), [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]], [(0, 13), ('-',), [-23, -22, -21, -20, -19, -18, -17, -16, -15]], [(0, 13), ('+',), [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]], [(0, 14), ('-',), [-24, -23, -22, -21, -20, -19, -18, -17, -16]], [(0, 14), ('+',), [32, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]], [(1, 2), ('-',), [-1, -8, -7, -6, -5, -4, -3, -2]], [(1, 2), ('+',), [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]], [(1, 3), ('-',), [-9, -8, -7, -6, -5, -4, -3, -2]], [(1, 3), ('+',), [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]], [(1, 4), ('-',), [-10, -9, -8, -7, -6, -5, -4, -3]], [(1, 4), ('+',), [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]], [(1, 5), ('-',), [-13, -12, -11, -10, -9, -8, -7, -6, -5, -4]], [(1, 5), ('+',), [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]], [(1, 6), ('-',), [-14, -13, -12, -11, -10, -9, -8, -7, -6, -5]], [(1, 6), ('+',), [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]], [(1, 7), ('-',), [-15, -14, -13, -12, -11, -10, -9, -8, -7, -6]], [(1, 7), ('+',), [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27]], [(1, 8), ('-',), [-17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7]], [(1, 8), ('+',), [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28]], [(1, 9), ('-',), [-18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8]], [(1, 9), ('+',), [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]], [(1, 10), ('-',), [-19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9]], [(1, 10), ('+',), [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]], [(1, 11), ('-',), [-20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10]], [(1, 11), ('+',), [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]], [(1, 12), ('-',), [-21, -20, -19, -18, -17, -16, -15, -14, -13, -12, -11]], [(1, 12), ('+',), [32, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]], [(1, 13), ('-',), [-22, -21, -20, -19, -18, -17, -16, -15, -14, -13, -12]], [(1, 13), ('+',), [32, 33, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]], [(1, 14), ('-',), [-23, -22, -21, -20, -19, -18, -17, -16, -15, -13]], [(1, 14), ('+',), [32, 33, 34, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]], [(2, 3), ('-',), [-2, -7, -6, -5, -4, -3, -1]], [(2, 3), ('+',), [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25]], [(2, 4), ('-',), [-9, -8, -7, -6, -5, -4, -3, -2]], [(2, 4), ('+',), [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]], [(2, 5), ('-',), [-12, -11, -10, -9, -8, -7, -6, -5, -4, -3]], [(2, 5), ('+',), [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]], [(2, 6), ('-',), [-13, -12, -11, -10, -9, -8, -7, -6, -5, -4]], [(2, 6), ('+',), [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]], [(2, 7), ('-',), [-14, -13, -12, -11, -10, -9, -8, -7, -6, -5]], [(2, 7), ('+',), [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]], [(2, 8), ('-',), [-16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6]], [(2, 8), ('+',), [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]], [(2, 9), ('-',), [-17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7]], [(2, 9), ('+',), [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]], [(2, 10), ('-',), [-18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8]], [(2, 10), ('+',), [32, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]], [(2, 11), ('-',), [-19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9]], [(2, 11), ('+',), [32, 33, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]], [(2, 12), ('-',), [-20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10]], [(2, 12), ('+',), [32, 33, 34, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]], [(2, 13), ('-',), [-21, -20, -19, -18, -17, -16, -15, -14, -13, -12, -11]], [(2, 13), ('+',), [32, 33, 34, 35, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]], [(2, 14), ('-',), [-22, -21, -20, -19, -18, -17, -16, -15, -14, -13, -12]], [(2, 14), ('+',), [32, 33, 34, 35, 36, 37, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]], [(3, 4), ('-',), [-2, -7, -6, -5, -4, -3, -1]], [(3, 4), ('+',), [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]], [(3, 5), ('-',), [-9, -8, -7, -6, -5, -4, -3, -2]], [(3, 5), ('+',), [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]], [(3, 6), ('-',), [-11, -10, -9, -8, -7, -6, -5, -4, -3]], [(3, 6), ('+',), [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]], [(3, 7), ('-',), [-13, -12, -11, -10, -9, -8, -7, -6, -5, -4]], [(3, 7), ('+',), [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]], [(3, 8), ('-',), [-15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5]], [(3, 8), ('+',), [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]], [(3, 9), ('-',), [-16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6]], [(3, 9), ('+',), [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]], [(3, 10), ('-',), [-17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7]], [(3, 10), ('+',), [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34]], [(3, 11), ('-',), [-18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8]], [(3, 11), ('+',), [32, 33, 34, 35, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]], [(3, 12), ('-',), [-19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9]], [(3, 12), ('+',), [32, 33, 34, 35, 36, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]], [(3, 13), ('-',), [-20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10]], [(3, 13), ('+',), [32, 33, 34, 35, 36, 37, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]], [(3, 14), ('-',), [-21, -20, -19, -18, -17, -16, -15, -14, -13, -12, -11]], [(3, 14), ('+',), [32, 33, 34, 35, 36, 37, 38, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]], [(4, 5), ('-',), [-2, -7, -6, -5, -4, -3, -1]], [(4, 5), ('+',), [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]], [(4, 6), ('-',), [-9, -8, -7, -6, -5, -4, -3, -2]], [(4, 6), ('+',), [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]], [(4, 7), ('-',), [-11, -10, -9, -8, -7, -6, -5, -4, -3]], [(4, 7), ('+',), [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]], [(4, 8), ('-',), [-13, -12, -11, -10, -9, -8, -7, -6, -5, -4]], [(4, 8), ('+',), [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]], [(4, 9), ('-',), [-15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5]], [(4, 9), ('+',), [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34]], [(4, 10), ('-',), [-16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6]], [(4, 10), ('+',), [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]], [(4, 11), ('-',), [-17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7]], [(4, 11), ('+',), [32, 33, 34, 35, 36, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]], [(4, 12), ('-',), [-18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8]], [(4, 12), ('+',), [32, 33, 34, 35, 36, 37, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]], [(4, 13), ('-',), [-19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9]], [(4, 13), ('+',), [32, 33, 34, 35, 36, 37, 38, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]], [(4, 14), ('-',), [-20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10]], [(4, 14), ('+',), [32, 33, 34, 35, 36, 37, 38, 39, 23, 24, 25, 26, 27, 28, 29, 30, 31]], [(5, 6), ('-',), [-2, -7, -6, -5, -4, -3, -1]], [(5, 6), ('+',), [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]], [(5, 7), ('-',), [-9, -8, -7, -6, -5, -4, -3, -2]], [(5, 7), ('+',), [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34]], [(5, 8), ('-',), [-12, -11, -10, -9, -8, -7, -6, -5, -4, -3]], [(5, 8), ('+',), [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]], [(5, 9), ('-',), [-14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4]], [(5, 9), ('+',), [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36]], [(5, 10), ('-',), [-15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5]], [(5, 10), ('+',), [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37]], [(5, 11), ('-',), [-16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6]], [(5, 11), ('+',), [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38]], [(5, 12), ('-',), [-17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7]], [(5, 12), ('+',), [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39]], [(5, 13), ('-',), [-18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8]], [(5, 13), ('+',), [32, 33, 34, 35, 36, 37, 38, 39, 40, 23, 24, 25, 26, 27, 28, 29, 30, 31]], [(5, 14), ('-',), [-19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9]], [(5, 14), ('+',), [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 24, 26, 27, 28, 29, 30, 31]], [(6, 7), ('-',), [-1, -7, -6, -5, -4, -3, -2]], [(6, 7), ('+',), [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]], [(6, 8), ('-',), [-10, -8, -7, -6, -5, -4, -3, -2]], [(6, 8), ('+',), [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36]], [(6, 9), ('-',), [-12, -11, -10, -9, -8, -7, -6, -5, -4, -3]], [(6, 9), ('+',), [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37]], [(6, 10), ('-',), [-14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4]], [(6, 10), ('+',), [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38]], [(6, 11), ('-',), [-15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5]], [(6, 11), ('+',), [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39]], [(6, 12), ('-',), [-16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6]], [(6, 12), ('+',), [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]], [(6, 13), ('-',), [-17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7]], [(6, 13), ('+',), [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 24, 26, 27, 28, 29, 30, 31]], [(6, 14), ('-',), [-18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8]], [(6, 14), ('+',), [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 25, 27, 28, 29, 30, 31]], [(7, 8), ('-',), [-2, -7, -6, -5, -4, -3, -1]], [(7, 8), ('+',), [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37]], [(7, 9), ('-',), [-9, -8, -7, -6, -5, -4, -3, -2]], [(7, 9), ('+',), [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38]], [(7, 10), ('-',), [-12, -11, -10, -9, -8, -7, -6, -5, -4, -3]], [(7, 10), ('+',), [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39]], [(7, 11), ('-',), [-13, -12, -11, -10, -9, -8, -7, -6, -5, -4]], [(7, 11), ('+',), [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]], [(7, 12), ('-',), [-14, -13, -12, -11, -10, -9, -8, -7, -6, -5]], [(7, 12), ('+',), [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 24, 25, 26, 27, 28, 29, 30, 31]], [(7, 13), ('-',), [-16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6]], [(7, 13), ('+',), [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 25, 27, 28, 29, 30, 31]], [(7, 14), ('-',), [-17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7]], [(7, 14), ('+',), [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 26, 29, 30, 31]], [(8, 9), ('-',), [-1, -8, -7, -6, -5, -4, -3, -2]], [(8, 9), ('+',), [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39]], [(8, 10), ('-',), [-10, -9, -8, -7, -6, -5, -4, -3, -2]], [(8, 10), ('+',), [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]], [(8, 11), ('-',), [-12, -11, -10, -9, -8, -7, -6, -5, -4, -3]], [(8, 11), ('+',), [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41]], [(8, 12), ('-',), [-13, -12, -11, -10, -9, -8, -7, -6, -5, -4]], [(8, 12), ('+',), [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 25, 26, 27, 28, 29, 30, 31]], [(8, 13), ('-',), [-14, -13, -12, -11, -10, -9, -8, -7, -6, -5]], [(8, 13), ('+',), [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 26, 28, 29, 30, 31]], [(8, 14), ('-',), [-16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6]], [(8, 14), ('+',), [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 27, 30, 31]], [(9, 10), ('-',), [-1, -8, -7, -6, -5, -4, -3, -2]], [(9, 10), ('+',), [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41]], [(9, 11), ('-',), [-9, -8, -7, -6, -5, -4, -3, -2]], [(9, 11), ('+',), [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42]], [(9, 12), ('-',), [-12, -11, -10, -9, -8, -7, -6, -5, -4, -3]], [(9, 12), ('+',), [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 26, 27, 28, 29, 30, 31]], [(9, 13), ('-',), [-13, -12, -11, -10, -9, -8, -7, -6, -5, -4]], [(9, 13), ('+',), [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 28, 29, 30, 31]], [(9, 14), ('-',), [-15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5]], [(9, 14), ('+',), [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 29, 31]], [(10, 11), ('-',), [-1, -8, -7, -6, -5, -4, -3, -2]], [(10, 11), ('+',), [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43]], [(10, 12), ('-',), [-11, -9, -8, -7, -6, -5, -4, -3, -2]], [(10, 12), ('+',), [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 27, 28, 29, 30, 31]], [(10, 13), ('-',), [-12, -11, -10, -9, -8, -7, -6, -5, -4, -3]], [(10, 13), ('+',), [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 29, 30, 31]], [(10, 14), ('-',), [-13, -12, -11, -10, -9, -8, -7, -6, -5, -4]], [(10, 14), ('+',), [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 30]], [(11, 12), ('-',), [-2, -7, -6, -5, -4, -3, -1]], [(11, 12), ('+',), [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 28, 29, 30, 31]], [(11, 13), ('-',), [-10, -9, -8, -7, -6, -5, -4, -3, -2]], [(11, 13), ('+',), [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 31]], [(11, 14), ('-',), [-11, -10, -9, -8, -7, -6, -5, -4, -3]], [(11, 14), ('+',), [32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47]], [(12, 13), ('-',), [-2, -8, -7, -6, -5, -4, -3, -1]], [(12, 13), ('+',), [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47]], [(12, 14), ('-',), [-10, -9, -8, -7, -6, -5, -4, -3, -2]], [(12, 14), ('+',), [34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48]], [(13, 14), ('-',), [-2, -7, -6, -5, -4, -3, -1]], [(13, 14), ('+',), [35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]]]
for [posicoes, operacoes, lista] in lista:
	gerador.addRegra(ValidacaoAnalise.verificarFuncaoLista, posicoes = posicoes, operacoes = operacoes, lista = lista)


gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncao, anteriores = sorteios[-10:], tamanho = 3, crescente = True, 	posicoes_ordenados = (0, 1, 2, 4, 7, 8, 10, 12, 13, 14), tamanho_minimo = 16)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncao, anteriores = sorteios[-10:], tamanho = 3, crescente = True, 	posicoes_ordenados = (0, 1, 4, 5, 6, 8, 9, 11, 13, 14), tamanho_minimo = 16)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncao, anteriores = sorteios[-10:], tamanho = 3, crescente = True, 	posicoes_ordenados = (0, 2, 3, 5, 8, 9, 10, 11, 13, 14), tamanho_minimo = 16)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncao, anteriores = sorteios[-10:], tamanho = 3, crescente = True, 	posicoes_ordenados = (1, 2, 5, 6, 7, 8, 9, 10, 12, 14), tamanho_minimo = 16)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncao, anteriores = sorteios[-10:], tamanho = 3, crescente = True, 	posicoes_ordenados = (1, 2, 6, 7, 8, 9, 10, 11, 12, 14), tamanho_minimo = 16)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncao, anteriores = sorteios[-10:], tamanho = 3, crescente = True, 	posicoes_ordenados = (1, 3, 5, 7, 8, 9, 11, 12, 13, 14), tamanho_minimo = 16)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncao, anteriores = sorteios[-10:], tamanho = 3, crescente = True, 	posicoes_ordenados = (2, 3, 5, 7, 8, 9, 10, 11, 13, 14), tamanho_minimo = 16)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncao, anteriores = sorteios[-10:], tamanho = 3, crescente = False, 	posicoes_ordenados = (0, 1, 2, 3, 4, 5, 7, 9, 11, 12), tamanho_minimo = 16)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncao, anteriores = sorteios[-10:], tamanho = 3, crescente = False, 	posicoes_ordenados = (0, 1, 2, 3, 4, 5, 7, 11, 12, 14), tamanho_minimo = 16)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncao, anteriores = sorteios[-10:], tamanho = 3, crescente = False, 	posicoes_ordenados = (0, 1, 2, 3, 4, 6, 9, 12, 13, 14), tamanho_minimo = 16)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncao, anteriores = sorteios[-10:], tamanho = 3, crescente = False, 	posicoes_ordenados = (0, 1, 2, 3, 5, 6, 7, 8, 9, 10), tamanho_minimo = 16)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncao, anteriores = sorteios[-10:], tamanho = 3, crescente = False, 	posicoes_ordenados = (0, 1, 2, 3, 5, 6, 7, 8, 10, 11), tamanho_minimo = 16)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncao, anteriores = sorteios[-10:], tamanho = 3, crescente = False, 	posicoes_ordenados = (0, 1, 2, 3, 5, 6, 7, 8, 11, 13), tamanho_minimo = 16)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncao, anteriores = sorteios[-10:], tamanho = 3, crescente = False, 	posicoes_ordenados = (0, 1, 2, 3, 5, 6, 7, 9, 12, 14), tamanho_minimo = 16)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncao, anteriores = sorteios[-10:], tamanho = 3, crescente = False, 	posicoes_ordenados = (0, 1, 2, 5, 6, 7, 8, 11, 12, 13), tamanho_minimo = 16)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncao, anteriores = sorteios[-10:], tamanho = 3, crescente = False, 	posicoes_ordenados = (0, 2, 3, 4, 5, 6, 10, 11, 13, 14), tamanho_minimo = 16)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncao, anteriores = sorteios[-10:], tamanho = 4, crescente = True, 	posicoes_ordenados = (0, 1, 2, 6, 8, 9, 10, 11, 12, 14), tamanho_minimo = 16)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncao, anteriores = sorteios[-10:], tamanho = 4, crescente = True, 	posicoes_ordenados = (0, 1, 4, 5, 6, 8, 10, 12, 13, 14), tamanho_minimo = 16)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncao, anteriores = sorteios[-10:], tamanho = 4, crescente = True, 	posicoes_ordenados = (1, 3, 5, 6, 8, 9, 10, 11, 13, 14), tamanho_minimo = 16)

gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncao, anteriores = sorteios[-10:], tamanho = 4, crescente = True, posicoes_ordenados = (1, 2, 5, 8, 9, 10, 11, 12, 13, 14), tamanho_minimo = 17)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncao, anteriores = sorteios[-10:], tamanho = 4, crescente = False, posicoes_ordenados = (0, 2, 3, 5, 7, 8, 9, 10, 11, 12), tamanho_minimo = 17)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncao, anteriores = sorteios[-10:], tamanho = 4, crescente = False, posicoes_ordenados = (0, 2, 3, 5, 7, 8, 9, 10, 11, 13), tamanho_minimo = 17)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncao, anteriores = sorteios[-10:], tamanho = 4, crescente = False, posicoes_ordenados = (0, 2, 3, 5, 7, 8, 9, 10, 11, 14), tamanho_minimo = 17)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncao, anteriores = sorteios[-10:], tamanho = 4, crescente = False, posicoes_ordenados = (0, 2, 3, 5, 7, 8, 9, 10, 12, 13), tamanho_minimo = 17)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncao, anteriores = sorteios[-10:], tamanho = 4, crescente = False, posicoes_ordenados = (0, 2, 3, 5, 7, 8, 9, 10, 12, 14), tamanho_minimo = 17)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncao, anteriores = sorteios[-10:], tamanho = 4, crescente = False, posicoes_ordenados = (0, 2, 3, 5, 7, 8, 9, 10, 13, 14), tamanho_minimo = 17)

gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncao, anteriores = sorteios[-10:], tamanho = 4, crescente = False, posicoes_ordenados = (2, 4, 6, 7, 8, 9, 10, 11, 13, 14), tamanho_minimo = 18)


gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = True, posicoes_ordenados = (0, 1, 2, 3, 4, 8, 11, 12, 13, 14), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = True, posicoes_ordenados = (0, 1, 2, 4, 6, 8, 10, 12, 13, 14), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = True, posicoes_ordenados = (0, 1, 2, 7, 8, 9, 10, 11, 13, 14), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = True, posicoes_ordenados = (0, 1, 3, 4, 6, 9, 10, 11, 12, 13), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = True, posicoes_ordenados = (0, 1, 3, 5, 6, 7, 8, 11, 12, 13), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = True, posicoes_ordenados = (0, 1, 3, 5, 7, 8, 11, 12, 13, 14), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = True, posicoes_ordenados = (0, 1, 3, 7, 8, 9, 10, 11, 13, 14), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = True, posicoes_ordenados = (0, 1, 6, 7, 8, 10, 11, 12, 13, 14), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = True, posicoes_ordenados = (0, 3, 4, 5, 6, 8, 9, 11, 12, 13), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = True, posicoes_ordenados = (0, 3, 4, 5, 6, 9, 10, 11, 12, 13), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = True, posicoes_ordenados = (0, 4, 5, 6, 7, 8, 9, 11, 13, 14), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = True, posicoes_ordenados = (0, 4, 5, 6, 7, 9, 10, 12, 13, 14), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = True, posicoes_ordenados = (0, 4, 5, 6, 7, 10, 11, 12, 13, 14), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = True, posicoes_ordenados = (1, 2, 3, 4, 6, 7, 8, 10, 12, 13), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = True, posicoes_ordenados = (1, 2, 3, 4, 6, 7, 9, 10, 12, 13), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = True, posicoes_ordenados = (1, 2, 3, 4, 6, 9, 10, 12, 13, 14), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = True, posicoes_ordenados = (1, 2, 3, 4, 7, 9, 10, 11, 12, 13), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = True, posicoes_ordenados = (1, 2, 3, 6, 7, 8, 9, 10, 12, 13), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = True, posicoes_ordenados = (1, 2, 3, 6, 7, 9, 10, 11, 12, 13), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = True, posicoes_ordenados = (1, 2, 3, 6, 8, 9, 10, 12, 13, 14), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = True, posicoes_ordenados = (1, 2, 4, 6, 7, 9, 10, 11, 12, 13), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = True, posicoes_ordenados = (1, 4, 5, 7, 8, 9, 10, 11, 12, 13), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = True, posicoes_ordenados = (2, 3, 4, 5, 6, 7, 9, 10, 13, 14), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = True, posicoes_ordenados = (2, 3, 4, 5, 6, 7, 10, 11, 13, 14), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = True, posicoes_ordenados = (2, 3, 4, 6, 7, 8, 10, 11, 12, 13), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = True, posicoes_ordenados = (2, 3, 4, 6, 8, 9, 10, 11, 12, 14), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = True, posicoes_ordenados = (2, 4, 5, 6, 8, 9, 10, 11, 12, 13), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 1, 2, 3, 4, 5, 9, 10, 11, 12), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 1, 2, 3, 4, 5, 9, 10, 12, 13), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 1, 2, 3, 4, 6, 7, 8, 12, 14), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 1, 2, 3, 4, 6, 7, 9, 11, 14), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 1, 2, 3, 4, 6, 7, 9, 12, 13), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 1, 2, 3, 4, 6, 7, 10, 12, 13), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 1, 2, 3, 4, 6, 8, 9, 10, 11), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 1, 2, 3, 4, 6, 9, 10, 11, 12), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 1, 2, 3, 4, 6, 9, 10, 12, 13), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 1, 2, 3, 4, 6, 9, 11, 12, 14), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 1, 2, 3, 4, 7, 8, 9, 11, 14), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 1, 2, 3, 4, 7, 8, 9, 12, 14), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 1, 2, 3, 5, 6, 7, 8, 12, 14), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 1, 2, 3, 5, 6, 7, 10, 11, 12), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 1, 2, 3, 5, 6, 7, 11, 12, 13), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 1, 2, 3, 6, 7, 8, 10, 11, 12), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 1, 2, 3, 6, 7, 8, 10, 12, 14), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 1, 2, 3, 6, 7, 10, 11, 12, 13), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 1, 2, 3, 6, 8, 9, 10, 12, 14), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 1, 2, 3, 7, 8, 10, 11, 12, 13), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 1, 2, 4, 5, 6, 7, 11, 12, 14), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 1, 2, 4, 5, 6, 8, 9, 10, 11), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 1, 2, 4, 5, 6, 8, 10, 12, 13), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 1, 2, 4, 5, 7, 8, 10, 11, 13), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 1, 2, 4, 5, 9, 10, 11, 12, 14), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 1, 2, 4, 6, 7, 8, 10, 12, 14), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 1, 2, 4, 6, 7, 9, 10, 11, 13), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 1, 2, 4, 6, 7, 9, 11, 12, 14), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 1, 2, 4, 6, 9, 10, 12, 13, 14), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 1, 2, 4, 7, 8, 10, 11, 12, 13), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 1, 2, 4, 7, 9, 10, 11, 13, 14), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 1, 2, 4, 7, 9, 10, 12, 13, 14), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 1, 2, 6, 7, 8, 9, 10, 11, 12), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 1, 3, 4, 5, 6, 7, 11, 12, 13), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 1, 3, 4, 5, 6, 8, 9, 10, 11), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 1, 3, 4, 5, 6, 8, 9, 10, 13), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 1, 3, 4, 5, 6, 8, 10, 12, 13), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 1, 3, 4, 5, 7, 10, 11, 12, 13), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 1, 3, 4, 5, 8, 9, 10, 12, 13), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 1, 3, 4, 6, 7, 9, 11, 12, 13), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 1, 3, 4, 7, 8, 9, 10, 13, 14), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 1, 3, 5, 6, 7, 8, 9, 10, 12), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 1, 3, 5, 6, 7, 10, 11, 12, 13), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 1, 3, 5, 7, 8, 9, 10, 12, 13), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 1, 3, 5, 7, 8, 10, 11, 12, 13), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 1, 3, 6, 7, 8, 10, 11, 12, 13), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 1, 3, 7, 8, 9, 10, 11, 12, 13), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 1, 4, 5, 6, 7, 8, 9, 12, 13), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 1, 4, 5, 6, 8, 9, 10, 11, 12), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 1, 4, 5, 7, 8, 9, 10, 12, 13), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 1, 4, 5, 8, 9, 10, 11, 12, 13), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 1, 4, 6, 7, 9, 10, 11, 12, 13), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 1, 5, 6, 7, 8, 10, 11, 13, 14), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 2, 3, 4, 5, 6, 7, 10, 11, 13), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 2, 3, 4, 5, 6, 8, 11, 12, 14), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 2, 3, 4, 5, 7, 9, 10, 11, 14), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 2, 3, 4, 6, 7, 10, 11, 12, 13), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 2, 3, 4, 6, 8, 9, 10, 11, 13), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 2, 4, 5, 6, 7, 10, 11, 12, 13), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 2, 4, 5, 7, 8, 9, 10, 11, 13), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 2, 4, 5, 7, 8, 10, 11, 12, 13), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 2, 4, 6, 7, 8, 10, 11, 13, 14), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 3, 4, 5, 6, 7, 8, 10, 11, 12), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 3, 4, 5, 6, 7, 8, 10, 12, 13), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 3, 4, 5, 6, 8, 9, 12, 13, 14), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 3, 4, 5, 6, 8, 10, 11, 12, 13), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 3, 4, 6, 8, 9, 11, 12, 13, 14), tamanho_minimo = 21)
gerador.addRegra(ValidacaoAnalise.verificarUsandoFuncaoV2, anteriores = sorteios[-10:], tamanho = 5, crescente = False, posicoes_ordenados = (0, 4, 5, 6, 7, 8, 9, 11, 12, 13), tamanho_minimo = 21)



gerador.addRegra(ValidacaoAnalise.verificarUsandoRanking, anteriores = sorteios[-10:], posicoes = (0, 1, 2, 4, 5, 6, 8, 9, 11, 12, 13, 14, 17, 18, 19, 21, 23, 24))
gerador.addRegra(ValidacaoAnalise.verificarUsandoRanking, anteriores = sorteios[-10:], posicoes = (0, 1, 2, 3, 5, 8, 9, 10, 11, 12, 15, 16, 17, 18, 20, 21, 22, 23))
gerador.addRegra(ValidacaoAnalise.verificarUsandoRanking, anteriores = sorteios[-10:], posicoes = (0, 1, 2, 4, 5, 6, 7, 8, 9, 11, 12, 13, 17, 18, 19, 21, 23, 24))
gerador.addRegra(ValidacaoAnalise.verificarUsandoRanking, anteriores = sorteios[-10:], posicoes = (0, 1, 2, 4, 5, 6, 7, 8, 9, 11, 12, 17, 18, 19, 21, 22, 23, 24))
gerador.addRegra(ValidacaoAnalise.verificarUsandoRanking, anteriores = sorteios[-10:], posicoes = (0, 1, 4, 5, 6, 8, 9, 11, 12, 13, 14, 15, 17, 18, 20, 21, 23, 24))
gerador.addRegra(ValidacaoAnalise.verificarUsandoRanking, anteriores = sorteios[-10:], posicoes = (0, 2, 3, 4, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22))
gerador.addRegra(ValidacaoAnalise.verificarUsandoRanking, anteriores = sorteios[-10:], posicoes = (0, 2, 3, 4, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22))


for c in combinations(range(15), 3):
	ret = analise.verificarSomaPosicoesQuantidade(c, 4)
	gerador.addRegra(ValidacaoAnalise.verificarSomaPosicoesQuantidade,  anteriores = sorteios[-3:], posicoes = c, maximo = ret[0], minimo = ret[1])


lista = [(1, 2, 9, 11, 12),(1, 3, 4, 5, 7),(1, 3, 4, 7, 12),(1, 3, 4, 9, 10),(1, 3, 4, 11, 12),(1, 3, 5, 11, 12),(1, 3, 7, 8, 10),(1, 3, 8, 9, 10),(1, 3, 8, 10, 11),(1, 3, 8, 11, 12),(1, 3, 9, 11, 12),(1, 3, 10, 11, 12),(1, 4, 5, 6, 11),(1, 4, 6, 7, 10),(1, 4, 6, 7, 11),(1, 4, 6, 9, 11),(1, 4, 7, 9, 12),(1, 4, 7, 10, 11),(1, 4, 9, 11, 12),(1, 5, 6, 11, 12),(1, 5, 7, 8, 9),(1, 5, 7, 9, 11),(1, 5, 9, 11, 12),(1, 6, 7, 8, 11),(1, 6, 7, 9, 11),(1, 7, 8, 10, 11),(1, 8, 9, 10, 11),(1, 8, 9, 11, 12),(2, 3, 5, 7, 8),(2, 3, 5, 7, 9),(2, 3, 5, 7, 11),(2, 3, 5, 8, 12),(2, 3, 7, 8, 10),(2, 3, 7, 10, 11),(2, 3, 7, 11, 12),(2, 3, 8, 9, 12),(2, 3, 9, 11, 12),(2, 5, 6, 7, 11),(2, 5, 6, 8, 11),(2, 5, 7, 9, 11),(2, 6, 7, 10, 11),(2, 6, 8, 9, 11),(2, 6, 8, 10, 11),(2, 7, 9, 11, 12),(3, 4, 5, 7, 9),(3, 4, 5, 7, 11),(3, 5, 7, 8, 12),(3, 5, 8, 9, 12),(3, 7, 8, 10, 11),(3, 8, 9, 10, 12),(3, 8, 9, 11, 12),(4, 5, 6, 7, 9),(4, 5, 6, 8, 11),(4, 6, 7, 9, 10),(5, 6, 7, 8, 11),(5, 7, 8, 9, 11),(5, 7, 8, 9, 12),(5, 8, 9, 11, 12),(6, 7, 8, 10, 11),(7, 8, 9, 11, 12),(8, 9, 10, 11, 12)]
for item in lista:
	gerador.addRegra(ValidacaoAnalise.compararNumerosEMultiplicador, numeros = item, multiplicador = 2)

lista = [(1, 2, 4, 5, 7),(1, 2, 4, 5, 8),(1, 4, 5, 6, 8),(2, 3, 4, 5, 7),(2, 3, 4, 5, 8),(3, 4, 5, 6, 8)]
for item in lista:
	gerador.addRegra(ValidacaoAnalise.compararNumerosEMultiplicador, numeros = item, multiplicador = 3)

gerador.addRegra(ValidacaoAnalise.compararNumerosEMultiplicador, numeros = (1, 2, 3, 4, 5, 6), multiplicador = 4)


lista = [(1, 2, 5, 7),(1, 3, 6, 7),(1, 3, 7, 8),(1, 4, 5, 6),(1, 4, 5, 7),(1, 4, 5, 8),(1, 4, 7, 8),(1, 5, 6, 7),(1, 5, 7, 8),(2, 3, 4, 5),(2, 3, 5, 8),(2, 3, 6, 8),(2, 3, 7, 8),(2, 4, 5, 7),(3, 4, 7, 8),(3, 5, 6, 7),(4, 5, 7, 8),(5, 6, 7, 8)]
for item in lista:
	gerador.addRegra(ValidacaoAnalise.compararNumerosEMultiplicador, numeros = item, multiplicador = (2,3))

lista = [(1, 3, 5),(1, 4, 5),(1, 5, 6),(2, 3, 5),(2, 5, 6),(3, 4, 5),(4, 5, 6)]
for item in lista:
	gerador.addRegra(ValidacaoAnalise.compararNumerosEMultiplicador, numeros = item, multiplicador = (2,3,4))

lista = [(1, 2, 3),(1, 2, 4),(1, 3, 4),(1, 3, 5),(1, 4, 5),(2, 3, 4),(2, 3, 5),(2, 4, 5),(3, 4, 5)]
for item in lista:
	gerador.addRegra(ValidacaoAnalise.compararNumerosEMultiplicador, numeros = item, multiplicador = (2,3,4,5))

lista = [(1, 4),(3, 4)]
for item in lista:
	gerador.addRegra(ValidacaoAnalise.compararNumerosEMultiplicador, numeros = item, multiplicador = (2,3,4,5,6))


lista = list(combinations(range(1,14), 5))
for c in lista:
	ret = analise.compararNumerosEConvergencia(c, True)
	if ret['Qtd Igual'] == 1:
		gerador.addRegra(ValidacaoAnalise.compararNumerosEConvergencia, numeros = c)



combs = [((14, 6), (8, 7)),((14, 5), (8, 6)),((14, 3), (6, 5)),((14, 2), (13, 8)),((14, 2), (12, 11)),((14, 2), (7, 3)),((14, 1), (7, 2)),((14, 0), (11, 10)),((14, 0), (8, 1)),((13, 5), (12, 11)),((13, 4), (7, 5)),((13, 3), (12, 11)),((13, 3), (6, 4)),((13, 2), (12, 10)),((13, 1), (12, 8)),((13, 1), (11, 10)),((13, 1), (7, 2)),((13, 0), (12, 7)),((12, 4), (6, 5)),((12, 3), (5, 4)),((12, 1), (6, 2)),((11, 2), (10, 9)),((11, 1), (10, 8)),((11, 1), (10, 7)),((11, 1), (5, 2)),((11, 0), (10, 7)),((10, 0), (9, 8)),((10, 0), (3, 1)),((9, 1), (8, 7)),((9, 1), (3, 2)),((9, 0), (8, 6)),((8, 0), (7, 6))]
for comb in combs:
	gerador.addRegra(ValidacaoAnalise.verificarOperacaoPosicoes, posicoes = comb, operacao = '+')

combs = [((14, 8), (12, 6), (10, 4), (8, 2), (6, 0)),((14, 12), (13, 11), (10, 8), (8, 6), (4, 2), (2, 0)),((14, 12), (12, 10), (11, 9), (9, 7), (4, 2), (2, 0)),((14, 12), (12, 10), (10, 8), (8, 6), (7, 5), (4, 2)),((14, 12), (12, 10), (10, 8), (8, 6), (6, 4), (4, 2)),((14, 12), (12, 10), (10, 8), (8, 6), (6, 4), (2, 0)),((14, 12), (12, 10), (10, 8), (7, 5), (3, 1), (2, 0)),((14, 12), (12, 10), (10, 8), (5, 3), (4, 2), (2, 0)),((14, 12), (12, 10), (9, 7), (7, 5), (5, 3), (2, 0)),((14, 12), (11, 9), (9, 7), (6, 4), (4, 2), (2, 0)),((14, 12), (11, 9), (8, 6), (6, 4), (4, 2), (2, 0)),((14, 12), (11, 9), (7, 5), (5, 3), (4, 2), (2, 0)),((14, 12), (11, 9), (6, 4), (5, 3), (4, 2), (2, 0)),((14, 12), (10, 8), (9, 7), (7, 5), (5, 3), (2, 0)),((14, 12), (10, 8), (8, 6), (7, 5), (5, 3), (3, 1)),((14, 12), (10, 8), (8, 6), (7, 5), (5, 3), (2, 0)),((14, 12), (10, 8), (8, 6), (6, 4), (5, 3), (3, 1)),((14, 12), (10, 8), (8, 6), (6, 4), (4, 2), (2, 0)),((14, 12), (10, 8), (8, 6), (5, 3), (4, 2), (3, 1)),((14, 12), (10, 8), (8, 6), (5, 3), (4, 2), (2, 0)),((14, 12), (10, 8), (8, 6), (5, 3), (3, 1), (2, 0)),((14, 12), (10, 8), (7, 5), (6, 4), (5, 3), (2, 0)),((14, 12), (10, 8), (7, 5), (5, 3), (3, 1), (2, 0)),((14, 11), (13, 10), (12, 9), (9, 6), (5, 2), (3, 0)),((14, 11), (13, 10), (11, 8), (9, 6), (6, 3), (3, 0)),((14, 11), (13, 10), (11, 8), (9, 6), (5, 2), (3, 0)),((14, 11), (13, 10), (11, 8), (8, 5), (4, 1), (3, 0)),((14, 11), (13, 10), (10, 7), (9, 6), (8, 5), (3, 0)),((14, 11), (12, 9), (11, 8), (9, 6), (6, 3), (3, 0)),((14, 11), (12, 9), (11, 8), (9, 6), (4, 1), (3, 0)),((14, 11), (12, 9), (11, 8), (8, 5), (6, 3), (3, 0)),((14, 11), (12, 9), (11, 8), (8, 5), (5, 2), (3, 0)),((14, 11), (12, 9), (10, 7), (9, 6), (7, 4), (3, 0)),((14, 11), (12, 9), (10, 7), (9, 6), (6, 3), (3, 0)),((14, 11), (12, 9), (10, 7), (9, 6), (4, 1), (3, 0)),((14, 11), (12, 9), (10, 7), (8, 5), (6, 3), (3, 0)),((14, 11), (12, 9), (10, 7), (8, 5), (4, 1), (3, 0)),((14, 11), (12, 9), (9, 6), (8, 5), (4, 1), (3, 0)),((14, 11), (12, 9), (9, 6), (6, 3), (5, 2), (3, 0)),((14, 11), (12, 9), (9, 6), (6, 3), (4, 1), (3, 0)),((14, 11), (11, 8), (10, 7), (9, 6), (7, 4), (3, 0)),((14, 11), (11, 8), (10, 7), (9, 6), (6, 3), (3, 0)),((14, 11), (11, 8), (10, 7), (8, 5), (6, 3), (3, 0)),((14, 11), (11, 8), (9, 6), (8, 5), (5, 2), (3, 0)),((14, 11), (11, 8), (9, 6), (8, 5), (4, 1), (3, 0)),((14, 11), (11, 8), (9, 6), (7, 4), (6, 3), (3, 0)),((14, 11), (11, 8), (8, 5), (7, 4), (6, 3), (3, 0)),((14, 11), (11, 8), (8, 5), (6, 3), (4, 1), (3, 0)),((14, 11), (10, 7), (9, 6), (8, 5), (6, 3), (3, 0)),((14, 11), (10, 7), (9, 6), (7, 4), (6, 3), (3, 0)),((14, 11), (10, 7), (8, 5), (7, 4), (6, 3), (3, 0)),((14, 11), (10, 7), (8, 5), (6, 3), (5, 2), (3, 0)),((14, 11), (10, 7), (8, 5), (6, 3), (4, 1), (3, 0)),((14, 10), (13, 9), (12, 8), (11, 7), (8, 4), (4, 0)),((14, 10), (13, 9), (12, 8), (10, 6), (6, 2), (4, 0)),((14, 10), (13, 9), (11, 7), (10, 6), (7, 3), (4, 0)),((14, 10), (13, 9), (11, 7), (10, 6), (5, 1), (4, 0)),((14, 10), (13, 9), (11, 7), (9, 5), (8, 4), (4, 0)),((14, 10), (13, 9), (11, 7), (8, 4), (7, 3), (4, 0)),((14, 10), (13, 9), (11, 7), (8, 4), (6, 2), (4, 0)),((14, 10), (13, 9), (11, 7), (7, 3), (6, 2), (4, 0)),((14, 10), (13, 9), (10, 6), (9, 5), (7, 3), (4, 0)),((14, 10), (13, 9), (10, 6), (8, 4), (6, 2), (4, 0)),((14, 10), (13, 9), (10, 6), (7, 3), (6, 2), (4, 0)),((14, 10), (13, 9), (10, 6), (6, 2), (5, 1), (4, 0)),((14, 10), (13, 9), (9, 5), (8, 4), (6, 2), (4, 0)),((14, 10), (12, 8), (11, 7), (8, 4), (5, 1), (4, 0)),((14, 10), (12, 8), (10, 6), (9, 5), (7, 3), (4, 0)),((14, 10), (12, 8), (9, 5), (8, 4), (6, 2), (4, 0)),((14, 10), (12, 8), (9, 5), (8, 4), (5, 1), (4, 0)),((14, 10), (12, 8), (9, 5), (7, 3), (5, 1), (4, 0)),((14, 10), (11, 7), (10, 6), (9, 5), (7, 3), (4, 0)),((14, 10), (11, 7), (9, 5), (8, 4), (5, 1), (4, 0)),((14, 10), (11, 7), (9, 5), (7, 3), (5, 1), (4, 0)),((14, 10), (10, 6), (9, 5), (8, 4), (7, 3), (4, 0)),((14, 10), (10, 6), (9, 5), (8, 4), (6, 2), (4, 0)),((14, 10), (10, 6), (9, 5), (7, 3), (6, 2), (4, 0)),((14, 10), (10, 6), (9, 5), (7, 3), (5, 1), (4, 0)),((14, 10), (10, 6), (8, 4), (7, 3), (5, 1), (4, 0)),((14, 10), (10, 6), (8, 4), (6, 2), (5, 1), (4, 0)),((14, 10), (10, 6), (7, 3), (6, 2), (5, 1), (4, 0)),((14, 9), (13, 8), (11, 6), (8, 3), (7, 2), (5, 0)),((14, 9), (12, 7), (11, 6), (9, 4), (8, 3), (5, 0)),((14, 9), (11, 6), (9, 4), (8, 3), (7, 2), (5, 0)),((14, 8), (13, 7), (12, 6), (10, 4), (8, 2), (6, 0)),((14, 8), (12, 6), (11, 5), (10, 4), (8, 2), (6, 0)),((14, 8), (12, 6), (10, 4), (8, 2), (7, 1), (6, 0)),((13, 11), (12, 10), (11, 9), (6, 4), (4, 2), (2, 0)),((13, 11), (12, 10), (10, 8), (8, 6), (5, 3), (3, 1)),((13, 11), (12, 10), (10, 8), (8, 6), (5, 3), (2, 0)),((13, 11), (12, 10), (10, 8), (7, 5), (4, 2), (2, 0)),((13, 11), (12, 10), (10, 8), (6, 4), (4, 2), (2, 0)),((13, 11), (11, 9), (10, 8), (8, 6), (5, 3), (2, 0)),((13, 11), (11, 9), (10, 8), (7, 5), (5, 3), (2, 0)),((13, 11), (11, 9), (9, 7), (8, 6), (5, 3), (2, 0)),((13, 11), (11, 9), (9, 7), (6, 4), (4, 2), (3, 1)),((13, 11), (11, 9), (9, 7), (5, 3), (3, 1), (2, 0)),((13, 11), (11, 9), (8, 6), (5, 3), (4, 2), (2, 0)),((13, 11), (11, 9), (8, 6), (5, 3), (3, 1), (2, 0)),((13, 11), (11, 9), (7, 5), (5, 3), (4, 2), (2, 0)),((13, 11), (10, 8), (9, 7), (7, 5), (5, 3), (2, 0)),((13, 11), (10, 8), (8, 6), (7, 5), (5, 3), (2, 0)),((13, 11), (10, 8), (8, 6), (6, 4), (4, 2), (2, 0)),((13, 11), (10, 8), (8, 6), (5, 3), (3, 1), (2, 0)),((13, 11), (10, 8), (7, 5), (6, 4), (4, 2), (2, 0)),((13, 10), (12, 9), (9, 6), (8, 5), (6, 3), (3, 0)),((13, 10), (12, 9), (8, 5), (6, 3), (5, 2), (3, 0)),((13, 10), (11, 8), (9, 6), (8, 5), (6, 3), (3, 0)),((13, 10), (11, 8), (9, 6), (7, 4), (6, 3), (3, 0)),((13, 10), (11, 8), (9, 6), (6, 3), (5, 2), (3, 0)),((13, 10), (11, 8), (9, 6), (6, 3), (4, 1), (3, 0)),((13, 9), (12, 8), (11, 7), (9, 5), (6, 2), (4, 0)),((13, 9), (12, 8), (11, 7), (8, 4), (5, 1), (4, 0)),((13, 9), (12, 8), (9, 5), (7, 3), (5, 1), (4, 0)),((13, 9), (11, 7), (10, 6), (9, 5), (7, 3), (4, 0)),((13, 9), (11, 7), (10, 6), (9, 5), (6, 2), (4, 0)),((13, 9), (11, 7), (9, 5), (7, 3), (6, 2), (4, 0)),((13, 9), (11, 7), (9, 5), (7, 3), (5, 1), (4, 0)),((13, 9), (11, 7), (9, 5), (6, 2), (5, 1), (4, 0)),((13, 9), (10, 6), (9, 5), (7, 3), (6, 2), (4, 0)),((13, 8), (11, 6), (10, 5), (8, 3), (7, 2), (5, 0)),((12, 10), (11, 9), (8, 6), (6, 4), (4, 2), (2, 0)),((12, 10), (10, 8), (9, 7), (6, 4), (5, 3), (2, 0)),((12, 10), (10, 8), (8, 6), (6, 4), (5, 3), (2, 0)),((12, 10), (10, 8), (8, 6), (6, 4), (4, 2), (2, 0)),((12, 10), (10, 8), (7, 5), (4, 2), (3, 1), (2, 0)),((11, 9), (10, 8), (8, 6), (6, 4), (5, 3), (2, 0)),((11, 9), (9, 7), (8, 6), (6, 4), (5, 3), (2, 0)),((11, 9), (9, 7), (8, 6), (5, 3), (4, 2), (2, 0)),((11, 9), (9, 7), (8, 6), (5, 3), (3, 1), (2, 0)),((11, 9), (9, 7), (7, 5), (5, 3), (3, 1), (2, 0))]
for comb in combs:
	gerador.addRegra(ValidacaoAnalise.verificarOperacaoPosicoes, posicoes = comb, operacao = '-')



lista = [[(14, 12, 7), ('-', '-')], [(14, 11, 9), ('-', '-')], [(13, 10, 9), ('-', '-')], [(13, 8, 2), ('+', '-')], [(13, 4, 1), ('+', '+')], [(13, 3, 2), ('+', '+')], [(12, 11, 2), ('+', '-')], [(12, 10, 8), ('-', '-')], [(12, 10, 7), ('-', '-')], [(12, 10, 6), ('-', '-')], [(12, 7, 0), ('+', '+')], [(12, 6, 2), ('+', '+')], [(12, 5, 3), ('+', '+')], [(11, 10, 0), ('+', '-')], [(11, 9, 7), ('-', '-')], [(11, 9, 0), ('+', '+')], [(11, 8, 1), ('+', '+')], [(11, 7, 2), ('+', '+')], [(11, 5, 3), ('+', '+')], [(10, 9, 6), ('-', '-')], [(10, 9, 5), ('-', '-')], [(10, 8, 7), ('-', '-')], [(9, 8, 5), ('+', '+')], [(9, 7, 6), ('+', '+')], [(8, 7, 6), ('+', '+')], [(7, 6, 4), ('-', '-')], [(14, 13, 12, 6), ('-', '-', '+')], [(14, 13, 12, 5), ('-', '+', '+')], [(14, 13, 11, 7), ('-', '+', '+')], [(14, 13, 9, 4), ('-', '-', '+')], [(14, 13, 7, 0), ('+', '-', '-')], [(14, 13, 6, 1), ('-', '-', '+')], [(14, 13, 4, 0), ('-', '-', '-')], [(14, 13, 3, 1), ('-', '-', '-')], [(14, 12, 11, 3), ('-', '-', '+')], [(14, 12, 10, 9), ('-', '+', '+')], [(14, 12, 10, 8), ('-', '+', '+')], [(14, 12, 10, 7), ('-', '+', '+')], [(14, 12, 10, 2), ('-', '-', '+')], [(14, 12, 8, 0), ('-', '-', '+')], [(14, 12, 6, 1), ('-', '-', '-')], [(14, 12, 6, 0), ('-', '-', '-')], [(14, 12, 6, 0), ('+', '-', '-')], [(14, 12, 5, 2), ('-', '-', '-')], [(14, 12, 5, 1), ('-', '-', '-')], [(14, 12, 4, 3), ('-', '-', '-')], [(14, 11, 10, 6), ('-', '+', '+')], [(14, 11, 10, 1), ('-', '-', '+')], [(14, 11, 9, 8), ('-', '+', '+')], [(14, 11, 8, 0), ('-', '-', '-')], [(14, 11, 7, 1), ('-', '-', '-')], [(14, 11, 5, 0), ('+', '-', '-')], [(14, 10, 9, 7), ('-', '+', '+')], [(14, 9, 8, 4), ('-', '-', '-')], [(14, 9, 7, 5), ('-', '-', '-')], [(14, 7, 1, 0), ('+', '-', '-')], [(13, 12, 11, 5), ('-', '-', '+')], [(13, 12, 11, 4), ('-', '-', '+')], [(13, 12, 11, 4), ('+', '-', '+')], [(13, 12, 10, 9), ('-', '+', '+')], [(13, 12, 10, 4), ('-', '-', '+')], [(13, 12, 10, 4), ('+', '-', '+')], [(13, 12, 10, 3), ('-', '-', '+')], [(13, 12, 9, 3), ('-', '-', '+')], [(13, 12, 9, 3), ('+', '-', '+')], [(13, 12, 9, 2), ('-', '-', '+')], [(13, 12, 9, 2), ('+', '-', '+')], [(13, 12, 8, 2), ('-', '-', '+')], [(13, 12, 8, 2), ('+', '-', '+')], [(13, 12, 7, 1), ('-', '-', '+')], [(13, 12, 7, 1), ('+', '-', '+')], [(13, 12, 6, 0), ('+', '-', '+')], [(13, 12, 3, 0), ('+', '-', '-')], [(13, 12, 2, 1), ('+', '-', '-')], [(13, 11, 10, 4), ('+', '-', '+')], [(13, 11, 10, 2), ('-', '-', '+')], [(13, 11, 9, 4), ('+', '-', '+')], [(13, 11, 9, 2), ('-', '-', '+')], [(13, 11, 8, 3), ('+', '-', '+')], [(13, 11, 7, 2), ('+', '-', '+')], [(13, 11, 6, 1), ('+', '-', '+')], [(13, 11, 6, 0), ('+', '-', '+')], [(13, 11, 4, 2), ('-', '-', '-')], [(13, 11, 3, 0), ('+', '-', '-')], [(13, 11, 2, 0), ('+', '-', '-')], [(13, 10, 9, 4), ('+', '-', '+')], [(13, 10, 8, 4), ('+', '-', '+')], [(13, 10, 8, 3), ('+', '-', '+')], [(13, 10, 8, 0), ('-', '-', '-')], [(13, 10, 7, 3), ('+', '-', '+')], [(13, 10, 7, 1), ('-', '-', '-')], [(13, 10, 6, 2), ('-', '-', '-')], [(13, 10, 6, 2), ('+', '-', '+')], [(13, 10, 5, 3), ('-', '-', '-')], [(13, 10, 2, 0), ('+', '-', '-')], [(13, 10, 1, 0), ('+', '-', '-')], [(13, 9, 8, 2), ('-', '-', '-')], [(13, 9, 7, 4), ('+', '-', '+')], [(13, 9, 6, 3), ('+', '-', '+')], [(13, 9, 6, 2), ('+', '-', '+')], [(13, 9, 5, 2), ('+', '-', '+')], [(13, 9, 5, 1), ('+', '-', '+')], [(13, 9, 4, 1), ('+', '-', '+')], [(13, 9, 1, 0), ('+', '-', '-')], [(13, 8, 7, 4), ('+', '-', '+')], [(13, 8, 6, 4), ('+', '-', '+')], [(13, 8, 5, 2), ('+', '-', '+')], [(13, 8, 4, 2), ('+', '-', '+')], [(13, 8, 4, 1), ('+', '-', '+')], [(13, 7, 4, 2), ('+', '-', '+')], [(13, 7, 2, 1), ('+', '-', '+')], [(13, 7, 2, 0), ('+', '-', '+')], [(13, 6, 2, 1), ('+', '-', '+')], [(13, 6, 1, 0), ('+', '-', '+')], [(13, 4, 3, 1), ('+', '+', '-')], [(13, 4, 2, 1), ('+', '+', '-')], [(13, 4, 2, 0), ('+', '+', '-')], [(13, 3, 1, 0), ('+', '+', '+')], [(12, 11, 10, 9), ('-', '+', '+')], [(12, 11, 10, 7), ('+', '-', '+')], [(12, 11, 9, 4), ('-', '-', '+')], [(12, 11, 8, 5), ('+', '-', '+')], [(12, 11, 8, 4), ('+', '-', '+')], [(12, 11, 7, 3), ('+', '-', '+')], [(12, 11, 6, 3), ('+', '-', '+')], [(12, 11, 4, 1), ('+', '-', '+')], [(12, 11, 3, 1), ('-', '-', '-')], [(12, 11, 3, 0), ('+', '-', '+')], [(12, 10, 9, 7), ('+', '-', '+')], [(12, 10, 9, 1), ('-', '-', '+')], [(12, 10, 9, 0), ('-', '-', '+')], [(12, 10, 8, 6), ('+', '-', '+')], [(12, 10, 8, 1), ('-', '-', '+')], [(12, 10, 8, 0), ('-', '-', '+')], [(12, 10, 7, 5), ('+', '-', '+')], [(12, 10, 7, 4), ('+', '-', '+')], [(12, 10, 7, 0), ('-', '-', '+')], [(12, 10, 7, 0), ('-', '-', '-')], [(12, 10, 6, 4), ('+', '-', '+')], [(12, 10, 6, 1), ('-', '-', '-')], [(12, 10, 6, 0), ('-', '-', '-')], [(12, 10, 5, 2), ('-', '-', '-')], [(12, 10, 5, 1), ('-', '-', '-')], [(12, 10, 4, 3), ('-', '-', '-')], [(12, 10, 4, 2), ('-', '-', '-')], [(12, 10, 3, 1), ('+', '-', '+')], [(12, 10, 2, 0), ('+', '-', '+')], [(12, 9, 7, 6), ('+', '-', '+')], [(12, 9, 2, 1), ('+', '-', '+')], [(12, 8, 7, 3), ('-', '-', '-')], [(12, 8, 6, 4), ('-', '-', '-')], [(12, 8, 3, 2), ('+', '-', '+')], [(12, 7, 6, 5), ('+', '+', '-')], [(12, 7, 5, 4), ('+', '+', '-')], [(12, 7, 4, 3), ('+', '+', '-')], [(12, 7, 3, 2), ('+', '+', '-')], [(12, 7, 2, 1), ('+', '+', '-')], [(12, 7, 1, 0), ('+', '+', '-')], [(12, 6, 5, 2), ('+', '+', '-')], [(12, 6, 4, 1), ('+', '+', '-')], [(12, 6, 3, 0), ('+', '+', '-')], [(12, 6, 1, 0), ('+', '+', '+')], [(12, 5, 4, 0), ('+', '+', '-')], [(12, 5, 2, 0), ('+', '+', '+')], [(12, 4, 3, 0), ('+', '+', '-')], [(12, 4, 3, 0), ('+', '+', '+')], [(12, 4, 2, 1), ('+', '+', '+')], [(11, 10, 9, 3), ('-', '-', '+')], [(11, 10, 8, 7), ('+', '-', '+')], [(11, 10, 8, 2), ('-', '-', '+')], [(11, 10, 7, 1), ('-', '-', '+')], [(11, 10, 6, 5), ('+', '-', '+')], [(11, 10, 6, 0), ('-', '-', '+')], [(11, 10, 5, 4), ('+', '-', '+')], [(11, 10, 4, 3), ('+', '-', '+')], [(11, 10, 4, 1), ('-', '-', '-')], [(11, 10, 3, 2), ('-', '-', '-')], [(11, 10, 3, 2), ('+', '-', '+')], [(11, 10, 2, 1), ('+', '-', '+')], [(11, 10, 1, 0), ('+', '-', '+')], [(11, 9, 8, 7), ('+', '+', '-')], [(11, 9, 8, 0), ('-', '-', '+')], [(11, 9, 7, 6), ('+', '+', '-')], [(11, 9, 6, 5), ('+', '+', '-')], [(11, 9, 6, 0), ('-', '-', '-')], [(11, 9, 5, 4), ('+', '+', '-')], [(11, 9, 4, 3), ('+', '+', '-')], [(11, 9, 3, 2), ('+', '+', '-')], [(11, 9, 2, 1), ('+', '+', '-')], [(11, 9, 1, 0), ('+', '+', '-')], [(11, 8, 7, 6), ('+', '+', '-')], [(11, 8, 7, 5), ('+', '+', '-')], [(11, 8, 6, 4), ('+', '+', '-')], [(11, 8, 5, 3), ('+', '+', '-')], [(11, 8, 4, 2), ('+', '+', '-')], [(11, 8, 3, 1), ('+', '+', '-')], [(11, 8, 2, 1), ('+', '+', '-')], [(11, 8, 2, 0), ('+', '+', '-')], [(11, 7, 6, 4), ('-', '-', '-')], [(11, 7, 6, 3), ('+', '+', '-')], [(11, 7, 5, 2), ('+', '+', '-')], [(11, 7, 4, 1), ('+', '+', '-')], [(11, 7, 3, 1), ('+', '+', '-')], [(11, 7, 3, 0), ('+', '+', '-')], [(11, 7, 2, 0), ('+', '+', '-')], [(11, 7, 1, 0), ('+', '+', '+')], [(11, 6, 5, 2), ('+', '+', '-')], [(11, 6, 1, 0), ('+', '+', '+')], [(11, 5, 4, 0), ('+', '+', '-')], [(11, 5, 2, 0), ('+', '+', '+')], [(10, 9, 8, 2), ('-', '-', '+')], [(10, 9, 8, 1), ('-', '-', '+')], [(10, 9, 7, 1), ('-', '-', '+')], [(10, 9, 7, 0), ('-', '-', '+')], [(10, 9, 6, 4), ('+', '+', '-')], [(10, 9, 6, 0), ('-', '-', '+')], [(10, 9, 5, 3), ('+', '+', '-')], [(10, 9, 5, 0), ('-', '-', '-')], [(10, 9, 4, 1), ('-', '-', '-')], [(10, 9, 3, 2), ('-', '-', '-')], [(10, 8, 7, 4), ('+', '+', '-')], [(10, 8, 7, 0), ('-', '-', '-')], [(10, 8, 6, 3), ('+', '+', '-')], [(10, 8, 6, 1), ('-', '-', '-')], [(10, 8, 6, 0), ('-', '-', '-')], [(10, 8, 5, 2), ('-', '-', '-')], [(10, 8, 5, 2), ('+', '+', '-')], [(10, 8, 4, 3), ('-', '-', '-')], [(10, 7, 6, 3), ('-', '-', '-')], [(10, 7, 6, 2), ('+', '+', '-')], [(10, 7, 5, 4), ('-', '-', '-')], [(10, 7, 5, 1), ('+', '+', '-')], [(9, 8, 7, 1), ('-', '-', '+')], [(9, 8, 7, 1), ('+', '+', '-')], [(9, 8, 6, 0), ('+', '+', '-')], [(9, 8, 4, 0), ('+', '+', '+')], [(9, 8, 3, 1), ('+', '+', '+')], [(9, 7, 6, 0), ('-', '-', '-')], [(9, 7, 5, 1), ('-', '-', '-')], [(9, 7, 5, 0), ('+', '+', '+')], [(9, 7, 4, 2), ('-', '-', '-')], [(9, 7, 4, 1), ('+', '+', '+')], [(9, 7, 3, 2), ('+', '+', '+')], [(9, 6, 5, 4), ('-', '-', '-')], [(9, 6, 5, 3), ('-', '-', '-')], [(9, 6, 5, 1), ('+', '+', '+')], [(9, 6, 4, 2), ('+', '+', '+')], [(9, 5, 4, 3), ('+', '+', '+')], [(8, 7, 6, 1), ('-', '-', '+')], [(8, 7, 5, 0), ('+', '+', '+')], [(8, 7, 4, 1), ('+', '+', '+')], [(8, 7, 3, 2), ('+', '+', '+')], [(8, 7, 3, 1), ('-', '-', '-')], [(8, 6, 5, 2), ('-', '-', '-')], [(8, 6, 5, 1), ('-', '-', '-')], [(8, 6, 5, 0), ('-', '-', '-')], [(8, 6, 4, 3), ('-', '-', '-')], [(8, 6, 4, 2), ('-', '-', '-')], [(8, 6, 4, 1), ('-', '-', '-')], [(8, 5, 4, 3), ('-', '-', '-')], [(7, 6, 3, 0), ('-', '-', '-')], [(7, 6, 2, 1), ('-', '-', '-')], [(6, 5, 4, 0), ('-', '-', '-')], [(6, 5, 3, 1), ('-', '-', '-')]]
for [posicao, operacao] in lista:
	gerador.addRegra(ValidacaoAnalise.verificarContemOperacaoPosicoes, posicoes = posicao, operacoes = operacao)

# for n in combinations(range(15),3):
# 	rr = analise.verificarNaoAcontecimentosPorNumeros(ultimo.numeros, 1, n)
# 	for (posicoes, numeros) in rr:
# 		gerador.addRegra(ValidacaoAnalise.verificarPosicaoNumeros, posicoes = posicoes, numeros = numeros)



gerador.addRegra(ValidacaoAnalise.verificarContemAlgum, numeros = [4,5,20])
gerador.addRegra(ValidacaoAnalise.verificarNaoContemTodos, numeros = [11,18,22])

# gerador.calcularReducao(1000)

# gerador.buscarNumeros(100)

gerador.analisarSorteio([8, 13, 18, 10, 23, 17, 25, 11, 22, 3, 21, 1, 4, 14, 19])

# print(ultimo.concurso)

## RESUMO
# Jogos Realizados: 100
# Jogos com acerto:
# EficÃ¡cia: 